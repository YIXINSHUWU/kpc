{
    "setting": {
        "title": "线条",
        "order": 2
    },
    "catalogs": [],
    "contents": "<p>此示例展示线条的所有属性，需要说明的是：</p>\n<ol>\n<li><code>DLine</code>支持<code>startPoint</code>和<code>endPoint</code>来指定线条的起止点，但是一旦设置了线条的<code>from</code>和<code>to</code>属性，它们将不再生效；</li>\n<li><code>DLine</code>通过<code>from</code>和<code>to</code>指定连接的两个图形，但是线条具体的起止位置是根据图形的位置动态计算的，如果你需要固定\n起止位置为图形周长上的某个点，需要通过<code>exit</code>（起始位置）和<code>entry</code>（终止位置）来指定</li>\n</ol>\n",
    "index": 170,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> {Diagram, DLine, DRectangle, DStackLayout} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/diagram'</span>;\n<span class=\"hljs-keyword\">import</span> {Form, FormItem} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/form'</span>;\n<span class=\"hljs-keyword\">import</span> {Button, ButtonGroup} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/button'</span>;\n<span class=\"hljs-keyword\">import</span> {Slider} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/slider'</span>;\n<span class=\"hljs-keyword\">import</span> {Checkbox} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/checkbox'</span>;\n\n<span class=\"hljs-keyword\">const</span> keys = [<span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>, <span class=\"hljs-string\">'C'</span>];\n\n&lt;Form&gt;\n    &lt;FormItem v-for={{ ['startArrow', 'endArrow', 'type', 'strokeStyle'] }} label={{ value }}&gt;\n        &lt;ButtonGroup checkType=\"radio\" v-model={{ value }}&gt;\n            &lt;Button v-for={{ DLine.propTypes[value] }}\n                value={{ value }}\n            &gt;{{ value }}&lt;/Button&gt;\n        &lt;/ButtonGroup&gt;\n    &lt;/FormItem&gt;\n    &lt;FormItem v-for={{ ['startPoint', 'endPoint'] }} label={{ value }}&gt;\n        &lt;template v-for={{ [0, 1] }} v-for-value='index'&gt;\n            &lt;Slider\n                value={{ self.get(`${value}.${index}`) }}\n                min={{ 0 }}\n                max={{ 1000 }}\n                isShowInput={{ false }}\n                showTooltip\n                ev-$change:value={{ self._onSliderChange.bind(self, value, index) }}\n            &gt;\n                &lt;b:tooltip params=\"value\"&gt;\n                    {{ index === 0 ? 'x: ' : 'y: ' }} {{ value }}\n                &lt;/b:tooltip&gt;\n            &lt;/Slider&gt;\n            &lt;br /&gt;\n        &lt;/template&gt;\n    &lt;/FormItem&gt;\n    &lt;FormItem v-for={{ ['from', 'to'] }} label={{ value }}&gt;\n        &lt;ButtonGroup checkType=\"radio\" v-model={{ value }}&gt;\n            &lt;Button v-for={{ keys }} value={{ value }}&gt;{{ value }}&lt;/Button&gt;\n            &lt;Button value={{ null }}&gt;None&lt;/Button&gt;\n        &lt;/ButtonGroup&gt;\n    &lt;/FormItem&gt;\n    &lt;FormItem v-for={{ ['exit', 'entry'] }} label={{ value }}&gt;\n        &lt;b:label&gt;\n            &lt;Checkbox v-model={{ `use${value}` }}&gt;{{ value }}&lt;/Checkbox&gt;\n        &lt;/b:label&gt;\n        &lt;template v-for={{ [0, 1] }} v-for-value='index'&gt;\n            &lt;Slider\n                value={{ self.get(`${value}.${index}`) }}\n                min={{ 0 }}\n                max={{ 1 }}\n                step={{ 0 }}\n                isShowInput={{ false }}\n                showTooltip\n                ev-$change:value={{ self._onSliderChange.bind(self, value, index) }}\n                disabled={{ !self.get(`use${value}`) }}\n            &gt;\n                &lt;b:tooltip params=\"value\"&gt;\n                    {{ index === 0 ? 'x: ' : 'y: ' }} {{ value }}\n                &lt;/b:tooltip&gt;\n            &lt;/Slider&gt;\n            &lt;br /&gt;\n        &lt;/template&gt;\n    &lt;/FormItem&gt;\n    &lt;FormItem&gt;\n        &lt;Diagram&gt;\n            &lt;DStackLayout spacing=\"50\" border=\"20\"&gt;\n                &lt;DRectangle v-for={{ keys }} key={{ value }} label={{ value }} /&gt; \n            &lt;/DStackLayout&gt;\n            &lt;DLine\n                startArrow={{ self.get('startArrow') }}\n                endArrow={{ self.get('endArrow') }}\n                startPoint={{ self.get('startPoint') }}\n                endPoint={{ self.get('endPoint') }}\n                type={{ self.get('type') }}\n                strokeStyle={{ self.get('strokeStyle') }}\n                from={{ self.get('from') }}\n                to={{ self.get('to') }}\n                exit={{ self.get('useexit') ? self.get('exit') : null }}\n                entry={{ self.get('useentry') ? self.get('entry') : null }}\n            /&gt;\n        &lt;/Diagram&gt;\n    &lt;/FormItem&gt;\n&lt;/Form&gt;</code></pre>"
        },
        {
            "language": "styl",
            "content": "<pre><code class=\"hljs styl\"><span class=\"hljs-selector-class\">.k-form-item</span>\n    <span class=\"hljs-attribute\">margin-bottom</span> <span class=\"hljs-number\">8px</span>\n<span class=\"hljs-selector-class\">.k-slider</span>\n    <span class=\"hljs-attribute\">width</span> <span class=\"hljs-number\">500px</span></code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./index.styl'</span>; \n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    defaults() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">startArrow</span>: <span class=\"hljs-string\">'none'</span>,\n            <span class=\"hljs-attr\">endArrow</span>: <span class=\"hljs-string\">'classic'</span>,\n            <span class=\"hljs-attr\">startPoint</span>: [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">100</span>],\n            <span class=\"hljs-attr\">endPoint</span>: [<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">150</span>],\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'straight'</span>,\n            <span class=\"hljs-attr\">strokeStyle</span>: <span class=\"hljs-string\">'solid'</span>,\n            <span class=\"hljs-attr\">from</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-attr\">to</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-attr\">exit</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n            <span class=\"hljs-attr\">entry</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n            <span class=\"hljs-attr\">useexit</span>: <span class=\"hljs-literal\">false</span>,\n            <span class=\"hljs-attr\">useentry</span>: <span class=\"hljs-literal\">false</span>,\n        };\n    }\n\n    _onSliderChange(name, index, c, value) {\n        <span class=\"hljs-keyword\">let</span> propValue = <span class=\"hljs-keyword\">this</span>.get(name).slice(<span class=\"hljs-number\">0</span>);\n        propValue[index] = value;\n        <span class=\"hljs-keyword\">this</span>.set(name, propValue);\n    }\n}</code></pre>"
        },
        {
            "language": "vue",
            "content": "<pre><code class=\"hljs html\">请参考index.vdt</code></pre>"
        },
        {
            "language": "jsx",
            "content": "<pre><code class=\"hljs jsx\">请参考index.vdt</code></pre>"
        },
        {
            "language": "ts",
            "content": "<pre><code class=\"hljs ts\">请参考index.vdt</code></pre>"
        }
    ]
}