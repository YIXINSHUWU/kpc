{
    "setting": {
        "title": "Angular中使用",
        "order": 1.21,
        "sidebar": "doc"
    },
    "catalogs": [],
    "contents": "<blockquote>\n<p>目前KPC并没有TypeScript类型声明，所以你需要将KPC组件转为<code>any</code>类型</p>\n<p>所有组件都已在<code>Angular@8</code>下测试通过</p>\n</blockquote>\n<h1 id='header-%E5%AE%89%E8%A3%85'>安装</h1><pre><code class=\"hljs js\">npm <span class=\"hljs-keyword\">install</span> kpc-angular -S\n</code></pre>\n<h1 id='header-Angular%20CLI'>Angular CLI</h1><p>使用<code>@angular/cli</code>可以轻松地初始化Angular项目，但是由于<code>KPC</code>并非通过<code>Angular</code>编写，它引入样式的方式并非<code>styleUrl</code>，而是直接<code>import</code>，所以我们需要额外配置<code>webpack</code>。</p>\n<h2 id='header-%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96'>安装和初始化</h2><pre><code class=\"hljs shell\">npm install -<span class=\"hljs-keyword\">g</span> @angular/<span class=\"hljs-keyword\">cli</span>\nng new my-<span class=\"hljs-keyword\">app</span>\n<span class=\"hljs-keyword\">cd</span> my-<span class=\"hljs-keyword\">app</span>\nnpm install kpc-angular -<span class=\"hljs-built_in\">S</span>\n</code></pre>\n<h2 id='header-%E9%85%8D%E7%BD%AEwebpack'>配置<code>webpack</code></h2><p>要配置Angular CLI初始化的项目的<code>webapck</code>，我们需要安装<code>@angular-builders/custom-webpack</code>，然后修改<code>angular.json</code></p>\n<pre><code class=\"hljs shell\"><span class=\"hljs-selector-tag\">npm</span> <span class=\"hljs-selector-tag\">install</span> @<span class=\"hljs-keyword\">angular</span>-<span class=\"hljs-keyword\">builders</span>/<span class=\"hljs-keyword\">custom</span>-<span class=\"hljs-keyword\">webpack</span> -D\n</code></pre>\n<p>修改<code>angular.json</code></p>\n<pre><code class=\"hljs diff\">--- a/angular.json\n+++ b/angular.json\n@@ <span class=\"hljs-number\">-15</span>,<span class=\"hljs-number\">8</span> +<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">11</span> @@\n       <span class=\"hljs-string\">\"prefix\"</span>: <span class=\"hljs-string\">\"app\"</span>,\n       <span class=\"hljs-string\">\"architect\"</span>: {\n         <span class=\"hljs-string\">\"build\"</span>: {\n-          <span class=\"hljs-string\">\"builder\"</span>: <span class=\"hljs-string\">\"@angular-devkit/build-angular:browser\"</span>,\n+          <span class=\"hljs-string\">\"builder\"</span>: <span class=\"hljs-string\">\"@angular-builders/custom-webpack:browser\"</span>,\n           <span class=\"hljs-string\">\"options\"</span>: {\n+            <span class=\"hljs-string\">\"customWebpackConfig\"</span>: {\n+              <span class=\"hljs-string\">\"path\"</span>: <span class=\"hljs-string\">\"./webpack.config.js\"</span>\n+            },\n             <span class=\"hljs-string\">\"outputPath\"</span>: <span class=\"hljs-string\">\"dist/my-app\"</span>,\n             <span class=\"hljs-string\">\"index\"</span>: <span class=\"hljs-string\">\"src/index.html\"</span>,\n             <span class=\"hljs-string\">\"main\"</span>: <span class=\"hljs-string\">\"src/main.ts\"</span>,\n@@ <span class=\"hljs-number\">-65</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">68</span>,<span class=\"hljs-number\">7</span> @@\n           }\n         },\n         <span class=\"hljs-string\">\"serve\"</span>: {\n-          <span class=\"hljs-string\">\"builder\"</span>: <span class=\"hljs-string\">\"@angular-devkit/build-angular:dev-server\"</span>,\n+          <span class=\"hljs-string\">\"builder\"</span>: <span class=\"hljs-string\">\"@angular-builders/custom-webpack:dev-server\"</span>,\n           <span class=\"hljs-string\">\"options\"</span>: {\n             <span class=\"hljs-string\">\"browserTarget\"</span>: <span class=\"hljs-string\">\"my-app:build\"</span>\n           },\n</code></pre>\n<p>然后我们就可以在根目录下创建<code>webpack.config.js</code>来添加自定义配置了，我们需要将<code>KPC</code>组件引入的<code>css</code>文件直接通过<code>css-loader</code>处理</p>\n<pre><code class=\"hljs js\">const <span class=\"hljs-built_in\">path</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\nmodule.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(config)</span></span> {\n  <span class=\"hljs-built_in\">config</span>.module.rules.<span class=\"hljs-built_in\">find</span>(rule =&gt; {\n    <span class=\"hljs-keyword\">if</span> (rule.test.toString() === <span class=\"hljs-string\">'/\\\\.css$/'</span>) {\n      rule.exclude.push(<span class=\"hljs-built_in\">path</span>.resolve(__dirname, <span class=\"hljs-string\">'node_modules/kpc-angular'</span>));\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n  });\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">config</span>;\n}\n</code></pre>\n<h2 id='header-%E5%BC%95%E5%85%A5KPC%E7%BB%84%E4%BB%B6'>引入KPC组件</h2><p>为了使<code>KPC</code>组件正常工作，我们需要使用<code>KPC</code>提供的<code>KpcBrowserModule</code>替换<code>BrowserModule</code>，所以需要同时导入<code>KpcBrowserModule</code>和<code>KpcModule</code>两个模块给<code>AppModule</code>。另外，还需要引入<code>CUSTOM_ELEMENTS_SCHEMA</code>，来使Angular将<code>KPC</code>组件当做<code>Web Component</code>元素</p>\n<pre><code class=\"hljs diff\"><span class=\"hljs-comment\">--- a/src/app/app.module.ts</span>\n+++ b/src/app/app.<span class=\"hljs-built_in\">module</span>.ts\n@@ <span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">5</span> +<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span> @@\n-<span class=\"hljs-keyword\">import</span> { BrowserModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/platform-browser'</span>;\n-<span class=\"hljs-keyword\">import</span> { NgModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n+<span class=\"hljs-keyword\">import</span> { KpcBrowserModule, KpcModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-angular'</span>;\n+<span class=\"hljs-keyword\">import</span> { NgModule, CUSTOM_ELEMENTS_SCHEMA } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n <span class=\"hljs-keyword\">import</span> { AppRoutingModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app-routing.module'</span>;\n <span class=\"hljs-keyword\">import</span> { AppComponent } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.component'</span>;\n@@ <span class=\"hljs-number\">-9</span>,<span class=\"hljs-number\">10</span> +<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">12</span> @@ <span class=\"hljs-keyword\">import</span> { AppComponent } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.component'</span>;\n     AppComponent\n   ],\n   <span class=\"hljs-name\">imports</span>: [\n-    BrowserModule,\n-    AppRoutingModule\n+    KpcBrowserModule,\n+    AppRoutingModule,\n+    KpcModule\n   ],\n   <span class=\"hljs-name\">providers</span>: [],\n-  <span class=\"hljs-name\">bootstrap</span>: [AppComponent]\n+  <span class=\"hljs-name\">bootstrap</span>: [AppComponent],\n+  <span class=\"hljs-name\">schemas</span>: [CUSTOM_ELEMENTS_SCHEMA]\n })\n <span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppModule</span> { }</span>\n</code></pre>\n<h2 id='header-%E4%BD%BF%E7%94%A8KPC%E7%BB%84%E4%BB%B6'>使用KPC组件</h2><p>至此，我们就可以愉快地使用<code>KPC</code>组件了</p>\n<blockquote>\n<p>需要注意的是，如果你要定义<code>KPC</code>组件的样式，你需要将<code>encapsulation</code>设为<code>ViewEncapsulation.None</code>，否则你将选择不到元素</p>\n</blockquote>\n<blockquote>\n<p><code>KPC</code>提供的组件都以<code>k-</code>作为前缀，并且该前缀具有特殊用途，如果你要自定义组件，请避免使用该前缀</p>\n</blockquote>\n<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> { Component, ViewEncapsulation } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> { MessageComponent } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-angular'</span>;\n\n@Component({\n  <span class=\"hljs-name\">selector</span>: <span class=\"hljs-string\">'app-root'</span>,\n  <span class=\"hljs-name\">template</span>: `\n    &lt;k-button <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">\"primary\"</span> (click)=<span class=\"hljs-string\">\"onClick()\"</span>&gt;Hello World&lt;/k-button&gt;\n  `,\n  <span class=\"hljs-name\">style</span>: `\n    .k-button {\n      <span class=\"hljs-name\">margin</span>: <span class=\"hljs-number\">10</span>px;\n    }\n  `,\n  <span class=\"hljs-name\">encapsulation</span>: ViewEncapsulation.None,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppComponent</span> {</span>\n  onClick() {\n    MessageComponent.success(<span class=\"hljs-string\">'Welcome to kpc world!'</span>);\n  }\n}\n</code></pre>\n<h1 id='header-%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98'>修改主题</h1><p><code>KPC</code>组件库的样式文件使用<code>stylus</code>编写，使用主题前，我们需要修改<code>webpack</code>配置，让组件的<code>stylus</code>文件进过<code>stylus-loader</code>处理。此时我们需要<code>kpc-angular/@stylus</code>下的文件，不过也可以通过<code>alias</code>配置来保持引入路径统一</p>\n<p>修改后的<code>webpack.config.js</code>文件如下</p>\n<pre><code class=\"hljs js\">const <span class=\"hljs-type\">path</span> = require(<span class=\"hljs-string\">'path'</span>);\n\nmodule.exports = <span class=\"hljs-keyword\">function</span>(config) {\n  config.module.rules.find(<span class=\"hljs-keyword\">rule</span> =&gt; {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">rule</span>.test.toString() === <span class=\"hljs-string\">'/\\\\.css$/'</span>) {\n      <span class=\"hljs-keyword\">rule</span>.<span class=\"hljs-keyword\">exclude</span>.push(<span class=\"hljs-type\">path</span>.resolve(__dirname, <span class=\"hljs-string\">'node_modules/kpc-angular'</span>));\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    }\n  });\n\n  // <span class=\"hljs-keyword\">if</span> you want <span class=\"hljs-keyword\">to</span> use `ksyun` theme\n  config.module.rules.find(<span class=\"hljs-keyword\">rule</span> =&gt; {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">rule</span>.test.toString() === <span class=\"hljs-string\">'/\\\\.styl$/'</span>) {\n      <span class=\"hljs-keyword\">rule</span>.<span class=\"hljs-keyword\">exclude</span>.push(<span class=\"hljs-type\">path</span>.resolve(__dirname, <span class=\"hljs-string\">'node_modules/kpc-angular'</span>));\n      <span class=\"hljs-keyword\">rule</span>.use.find(loader =&gt; {\n        <span class=\"hljs-keyword\">if</span> (loader.loader === <span class=\"hljs-string\">'stylus-loader'</span>) {\n          <span class=\"hljs-keyword\">Object</span>.assign(loader.<span class=\"hljs-keyword\">options</span>, {\n            <span class=\"hljs-string\">'resolve url'</span>: <span class=\"hljs-keyword\">true</span>,\n            <span class=\"hljs-string\">'include css'</span>: <span class=\"hljs-keyword\">true</span>,\n            <span class=\"hljs-string\">'import'</span>: <span class=\"hljs-type\">path</span>.resolve(__dirname, <span class=\"hljs-string\">'node_modules/kpc-angular/@stylus/styles/themes/ksyun/index.styl'</span>)\n          });\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n        }\n      });\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    }\n  });\n\n  // <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">alias</span>\n  config.resolve.<span class=\"hljs-keyword\">alias</span>[<span class=\"hljs-string\">'kpc-angular'</span>] = <span class=\"hljs-string\">'kpc-angular/@stylus'</span>;\n\n  <span class=\"hljs-keyword\">return</span> config;\n}\n</code></pre>\n",
    "index": 128
}