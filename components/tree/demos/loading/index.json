{
    "setting": {
        "title": "异步加载",
        "order": 1.2
    },
    "catalogs": [],
    "contents": "<p>添加<code>load</code>数据加载函数即可实现异步加载子节点功能，组件会传入当前节点对象作为参数，函数可以返回数组或者异步返回数组作为当前异步加载的子节点。如果子节点还可以进一步展开，可以将<code>children</code>属性设为空数组<code>[]</code>，否则不指定<code>children</code>则表示该节点为叶子节点。</p>\n<p>组件默认遇到<code>children</code>为<code>[]</code>空数组的情况就会去进行异步加载，你可以通过<code>loaded</code>属性设为<code>true</code>来标识该子节点已经加载完成，无需再次加载</p>\n",
    "index": 121,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> Tree <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/tree'</span>;\n\n<span class=\"hljs-keyword\">const</span> data = self.get(<span class=\"hljs-string\">'data'</span>);\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tree</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">data</span> }} \n    <span class=\"hljs-attr\">checkbox</span>\n    <span class=\"hljs-attr\">load</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">self._loadData</span> }}\n/&gt;</span></span></code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    defaults() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">data</span>: [\n                {\n                    <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'parent'</span>,\n                    <span class=\"hljs-attr\">children</span>: [\n                        {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'first child'</span>, <span class=\"hljs-attr\">children</span>: []},\n                        {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'last child'</span>, <span class=\"hljs-attr\">children</span>: [], <span class=\"hljs-attr\">loaded</span>: <span class=\"hljs-literal\">true</span>},\n                    ],\n                },\n            ],\n        }\n    }\n\n    _loadData(node) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> {\n            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                resolve([\n                    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'child1'</span>, <span class=\"hljs-attr\">children</span>: []},\n                    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'child2'</span>},\n                ]);\n            }, <span class=\"hljs-number\">1000</span>);\n        });\n    }\n}\n</code></pre>"
        },
        {
            "language": "vue",
            "content": "<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tree</span> <span class=\"hljs-attr\">:data</span>=<span class=\"hljs-string\">\"data\"</span> \n        <span class=\"hljs-attr\">checkbox</span>\n        <span class=\"hljs-attr\">:load</span>=<span class=\"hljs-string\">\"_loadData\"</span>\n    /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> Tree <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/tree'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: {\n        Tree\n    },\n    data() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-string\">\"data\"</span>: [\n                {\n                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"parent\"</span>,\n                    <span class=\"hljs-string\">\"children\"</span>: [\n                        {\n                            <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"first child\"</span>,\n                            <span class=\"hljs-string\">\"children\"</span>: []\n                        },\n                        {\n                            <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"last child\"</span>,\n                            <span class=\"hljs-string\">\"children\"</span>: [],\n                            <span class=\"hljs-string\">\"loaded\"</span>: <span class=\"hljs-literal\">true</span>\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n        _loadData(node) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> {\n                setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                    resolve([\n                        {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'child1'</span>, <span class=\"hljs-attr\">children</span>: []},\n                        {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'child2'</span>},\n                    ]);\n                }, <span class=\"hljs-number\">1000</span>);\n            });\n        },\n    },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>"
        },
        {
            "language": "jsx",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> Tree <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/tree'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>(props) {\n        <span class=\"hljs-keyword\">super</span>(props);\n        <span class=\"hljs-keyword\">this</span>.state = {\n            <span class=\"hljs-string\">\"data\"</span>: [\n                {\n                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"parent\"</span>,\n                    <span class=\"hljs-string\">\"children\"</span>: [\n                        {\n                            <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"first child\"</span>,\n                            <span class=\"hljs-string\">\"children\"</span>: []\n                        },\n                        {\n                            <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"last child\"</span>,\n                            <span class=\"hljs-string\">\"children\"</span>: [],\n                            <span class=\"hljs-string\">\"loaded\"</span>: <span class=\"hljs-literal\">true</span>\n                        }\n                    ]\n                }\n            ]\n        };\n        <span class=\"hljs-keyword\">this</span>._loadData = <span class=\"hljs-keyword\">this</span>._loadData.bind(<span class=\"hljs-keyword\">this</span>);\n    }\n\n    _loadData(node) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> {\n            setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                resolve([\n                    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'child1'</span>, <span class=\"hljs-attr\">children</span>: []},\n                    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'child2'</span>},\n                ]);\n            }, <span class=\"hljs-number\">1000</span>);\n        });\n    }\n    \n    render() {\n        <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">this</span>.state.data;\n    \n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tree</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{data}</span> \n                <span class=\"hljs-attr\">checkbox</span>\n                <span class=\"hljs-attr\">load</span>=<span class=\"hljs-string\">{this._loadData}</span>\n            /&gt;</span>\n        )\n    }\n}</span></code></pre>"
        }
    ]
}