{
    "setting": {
        "title": "基础用法",
        "order": 0
    },
    "catalogs": [],
    "contents": "<p>组件可以通过<code>v-model</code>双向绑定编辑的代码，通过<code>height</code>指定组件的高度（需要带单位），默认<code>100%</code>；通过<code>language</code>可以指定编程语言，默认为<code>javasript</code></p>\n<blockquote>\n<p><code>Code</code>组件基于<a href=\"https://github.com/Microsoft/monaco-editor\">Monaco Editor</a>，使用该组件之前，你需要安装<a href=\"https://github.com/Microsoft/monaco-editor-webpack-plugin\">monaco-editor-webpack-plugin</a>插件，并加入<code>webpack</code>插件配置中</p>\n<pre><code class=\"hljs shell\">npm <span class=\"hljs-keyword\">install</span> monaco-editor-webpack-<span class=\"hljs-keyword\">plugin</span> -D\n</code></pre>\n<p><code>webpack.config.js</code></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> MonacoWebpackPlugin = require(<span class=\"hljs-string\">'monaco-editor-webpack-plugin'</span>);\n\n<span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n    plugins: [\n        <span class=\"hljs-keyword\">new</span> MonacoWebpackPlugin()\n    ]\n}\n</code></pre>\n</blockquote>\n<blockquote>\n<p><code>monaco-editor</code>源码中有一些变量使用了<code>const</code>声明，所以会导致<code>uglify-js</code>报错，你可以将它通过<code>string-replace-loader</code>处理，（当然你也可以通过<code>babel-loader</code>处理，但是这会非常耗时）</p>\n<pre><code class=\"hljs shell\">npm <span class=\"hljs-keyword\">install</span> <span class=\"hljs-keyword\">string</span>-<span class=\"hljs-keyword\">replace</span>-loader -D\n</code></pre>\n<pre><code class=\"hljs js\">{\n    <span class=\"hljs-attribute\">test</span>: /\\.js$/,\n    include: [\n        path.<span class=\"hljs-built_in\">resolve</span>(__dirname, <span class=\"hljs-string\">'./node_modules/monaco-editor/esm/vs/language/typescript/lib/typescriptServices.js'</span>),\n        path.<span class=\"hljs-built_in\">resolve</span>(__dirname, <span class=\"hljs-string\">'./node_modules/monaco-editor/esm/vs/language/html/_deps/vscode-html-languageservice/beautify/beautify-css.js'</span>),\n    ],\n    use: [\n        {\n            loader: <span class=\"hljs-string\">'string-replace-loader'</span>,\n            options: {\n                search: <span class=\"hljs-string\">'export const '</span>,\n                replace: <span class=\"hljs-string\">'export var '</span>,\n                flags: <span class=\"hljs-string\">'g'</span>,\n            }\n        }\n    ]\n},\n</code></pre>\n<p>或者也可以使用<a href=\"https://github.com/terser-js/terser\">terser</a>(<code>uglify-es</code>不维护了)进行压缩</p>\n</blockquote>\n",
    "index": 25,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> Code <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/code'</span>;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Code</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"value\"</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">\"200px\"</span> <span class=\"hljs-attr\">language</span>=<span class=\"hljs-string\">\"javascript\"</span> /&gt;</span></span></code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n\n<span class=\"hljs-keyword\">const</span> code = <span class=\"hljs-string\">`function test() {\n    console.log('hello world');\n}`</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    defaults() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">value</span>: code\n        }\n    }\n}</code></pre>"
        },
        {
            "language": "vue",
            "content": "<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Code</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"value\"</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">\"200px\"</span> <span class=\"hljs-attr\">language</span>=<span class=\"hljs-string\">\"javascript\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"actionscript\">\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">import</span> Code from 'kpc/components/code';</span>\n\n<span class=\"hljs-keyword\">const</span> code = `<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    console.log(<span class=\"hljs-string\">'hello world'</span>);\n}`;\nexport <span class=\"hljs-keyword\">default</span> {\n    components: {\n        Code\n    },\n    data() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-literal\">null</span>\n        }\n    },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>"
        },
        {
            "language": "jsx",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> Code <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/code'</span>;\n\n<span class=\"hljs-keyword\">const</span> code = <span class=\"hljs-string\">`function test() {\n    console.log('hello world');\n}`</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>(props) {\n        <span class=\"hljs-keyword\">super</span>(props);\n        <span class=\"hljs-keyword\">this</span>.state = {};\n    }\n\n    render() {\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Code</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state.value}</span> <span class=\"hljs-attr\">on</span>$<span class=\"hljs-attr\">change-value</span>=<span class=\"hljs-string\">{(c,</span> <span class=\"hljs-attr\">value</span>) =&gt;</span> this.setState({value})} height=\"200px\" language=\"javascript\" /&gt;\n        )\n    }\n}</span></code></pre>"
        },
        {
            "language": "ts",
            "content": "<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> {Component} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-keyword\">const</span> code = <span class=\"hljs-string\">`function test() {\n    console.log('hello world');\n}`</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n    selector: <span class=\"hljs-string\">'app-demo'</span>,\n    template: <span class=\"hljs-string\">`\n        &lt;k-code [(value)]=\"value\" height=\"200px\" language=\"javascript\"&gt;&lt;/k-code&gt;\n    `</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppDemoComponent {\n    <span class=\"hljs-keyword\">private</span> value;\n}</code></pre>"
        }
    ]
}