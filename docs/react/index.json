{
    "setting": {
        "title": "React中使用",
        "order": 1.2,
        "sidebar": "doc"
    },
    "catalogs": [],
    "contents": "<h1 id='header-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C'>准备工作</h1><p>在学习使用kpc之前，假设你已经掌握了以下知识：</p>\n<ol>\n<li><a href=\"https://webpack.js.org/\">webpack</a> + <a href=\"https://babeljs.io/\">babel</a></li>\n<li><a href=\"https://reactjs.org/\">React</a></li>\n</ol>\n<h1 id='header-%E5%AE%89%E8%A3%85'>安装</h1><pre><code class=\"hljs js\">npm <span class=\"hljs-keyword\">install</span> kpc -S\n</code></pre>\n<h1 id='header-CDN'>CDN</h1><p>通过<a href=\"https://cdn.jsdelivr.net/npm/kpc/dist/\">cdn.jsdelivr.net/npm/kpc/dist/</a>可以直接引入最新版kpc，建议使用锁定版本地址，例如：<a href=\"https://cdn.jsdelivr.net/npm/kpc@1.0.0/dist/\">cdn.jsdelivr.net/npm/kpc@0.5.14/dist/</a></p>\n<pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>kpc-demo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"IE=edge, chrome=1\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"Cache-Control\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"no-siteapp\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"//cdn.jsdelivr.net/npm/kpc/dist/kpc.css\"</span> /&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 将上述kpc.css替换成ksyun.css，可以使用ksyun主题 --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"//cdn.jsdelivr.net/npm/kpc/dist/ksyun.css\" /&gt; --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"//cdn.jsdelivr.net/npm/react/umd/react.development.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"//cdn.jsdelivr.net/npm/react-dom/umd/react-dom.development.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"//cdn.jsdelivr.net/npm/babel-standalone/babel.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"//cdn.jsdelivr.net/npm/kpc/dist/kpc.react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/babel\"</span>&gt;</span><span class=\"javascript\">\n        <span class=\"hljs-keyword\">const</span> {Button, Message} = Kpc;\n\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n            hello() {\n                Message.success(<span class=\"hljs-string\">'Welcome to the world of Kpc and React!'</span>);\n            }\n\n            render() {\n                <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.hello.bind(this)}</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n            }\n        }\n\n        ReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Demo</span> /&gt;</span>, document.getElementById('app'));\n    </span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<h1 id='header-Create%20React%20App'>Create React App</h1><blockquote>\n<p>示例版本为<a href=\"mailto:`create-react-app@2.1.3\">`create-react-app@2.1.3</a>`，不同版本可能存在些许差异</p>\n</blockquote>\n<h2 id='header-%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96'>安装和初始化</h2><pre><code class=\"hljs shell\"><span class=\"hljs-string\">npx </span><span class=\"hljs-built_in\">create-react-app</span> <span class=\"hljs-string\">hello-world\n</span><span class=\"hljs-string\">cd </span><span class=\"hljs-string\">hello-world\n</span><span class=\"hljs-string\">npm </span><span class=\"hljs-string\">install </span><span class=\"hljs-string\">kpc </span>-S\n</code></pre>\n<h2 id='header-%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE'>修改配置</h2><p>修改配置之前，我们需要弹出项目的配置文件</p>\n<pre><code class=\"hljs shell\">npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> eject</span>\n</code></pre>\n<p>然后修改配置文件<code>config/webpack.config.js</code></p>\n<pre><code class=\"hljs diff\">--- a<span class=\"hljs-regexp\">/config/</span>webpack.config.js\n+++ b<span class=\"hljs-regexp\">/config/</span>webpack.config.js\n@@ -<span class=\"hljs-number\">265</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">265</span>,<span class=\"hljs-number\">8</span> @@ module.exports = <span class=\"hljs-keyword\">function</span>(webpackEnv) {\n         <span class=\"hljs-regexp\">//</span> Support React Native Web\n         <span class=\"hljs-regexp\">//</span> https:<span class=\"hljs-regexp\">//</span>www.smashingmagazine.com<span class=\"hljs-regexp\">/2016/</span><span class=\"hljs-number\">08</span><span class=\"hljs-regexp\">/a-glimpse-into-the-future-with-react-native-for-web/</span>\n         <span class=\"hljs-string\">'react-native'</span>: <span class=\"hljs-string\">'react-native-web'</span>,\n+        <span class=\"hljs-regexp\">//</span> @since <span class=\"hljs-number\">1.0</span> 推荐直接指向react编译包\n+        <span class=\"hljs-string\">'kpc'</span>: <span class=\"hljs-string\">'kpc/@react/@css'</span>,\n+        <span class=\"hljs-regexp\">//</span> @before <span class=\"hljs-number\">1.0</span>\n+        <span class=\"hljs-regexp\">//</span> <span class=\"hljs-string\">'kpc'</span>: <span class=\"hljs-string\">'kpc/@css'</span>,\n+        <span class=\"hljs-regexp\">//</span> <span class=\"hljs-string\">'intact$'</span>: <span class=\"hljs-string\">'intact-react'</span>,\n       },\n       plugins: [\n         <span class=\"hljs-regexp\">//</span> Adds support <span class=\"hljs-keyword\">for</span> installing with Plug<span class=\"hljs-string\">'n'</span>Play, leading to faster installs and adding\n</code></pre>\n<h2 id='header-%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98'>修改主题</h2><p>如果要修改主题，需要安装<code>stylus</code>和<code>stylus-loader</code></p>\n<pre><code class=\"hljs shell\">npm <span class=\"hljs-keyword\">install</span> stylus stylus-loader -D\n</code></pre>\n<p>然后修改配置文件<code>config/webpack.config.js</code>，让kpc指向<code>kpc/@stylus</code>目录，并且加入<code>stylus-loader</code></p>\n<pre><code class=\"hljs diff\">--- a/config/webpack.config.js\n+++ b/config/webpack.config.js\n@@ <span class=\"hljs-number\">-102</span>,<span class=\"hljs-number\">13</span> +<span class=\"hljs-number\">102</span>,<span class=\"hljs-number\">15</span> @@ <span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">webpackEnv</span>) </span>{\n         },\n       },\n     ].filter(<span class=\"hljs-built_in\">Boolean</span>);\n-    <span class=\"hljs-keyword\">if</span> (preProcessor) {\n+    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> preProcessor === <span class=\"hljs-string\">'string'</span>) {\n       loaders.push({\n         <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-built_in\">require</span>.resolve(preProcessor),\n         <span class=\"hljs-attr\">options</span>: {\n           <span class=\"hljs-attr\">sourceMap</span>: isEnvProduction &amp;&amp; shouldUseSourceMap,\n         },\n       });\n+    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> preProcessor === <span class=\"hljs-string\">'object'</span>) {\n+      loaders.push(preProcessor);\n     }\n     <span class=\"hljs-keyword\">return</span> loaders;\n   };\n@@ <span class=\"hljs-number\">-265</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">267</span>,<span class=\"hljs-number\">7</span> @@ <span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">webpackEnv</span>) </span>{\n         <span class=\"hljs-comment\">// Support React Native Web</span>\n         <span class=\"hljs-comment\">// https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/</span>\n         <span class=\"hljs-string\">'react-native'</span>: <span class=\"hljs-string\">'react-native-web'</span>,\n         <span class=\"hljs-comment\">// @since 1.0 推荐直接指向react编译包</span>\n-        <span class=\"hljs-string\">'kpc'</span>: <span class=\"hljs-string\">'kpc/@react/@css'</span>,\n+        <span class=\"hljs-string\">'kpc'</span>: <span class=\"hljs-string\">'kpc/@react/@stylus'</span>,\n         <span class=\"hljs-comment\">// @before 1.0</span>\n-        <span class=\"hljs-comment\">// 'kpc': 'kpc/@css',</span>\n+        <span class=\"hljs-comment\">// 'kpc': 'kpc/@stylus',</span>\n         <span class=\"hljs-comment\">// 'intact$': 'intact-react',</span>\n\n       },\n       <span class=\"hljs-attr\">plugins</span>: [\n@@ <span class=\"hljs-number\">-448</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">450</span>,<span class=\"hljs-number\">22</span> @@ <span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">webpackEnv</span>) </span>{\n                 <span class=\"hljs-string\">'sass-loader'</span>\n               ),\n             },\n+            {\n+              test: <span class=\"hljs-regexp\">/\\.styl$/</span>,\n+              use: getStyleLoaders(\n+                {\n+                  importLoaders: <span class=\"hljs-number\">2</span>,\n+                },\n+                {\n+                  loader: <span class=\"hljs-string\">'stylus-loader'</span>,\n+                  options: {\n+                    <span class=\"hljs-string\">'include css'</span>: <span class=\"hljs-literal\">true</span>,\n+                    <span class=\"hljs-string\">'resolve url'</span>: <span class=\"hljs-literal\">true</span>,\n+                    <span class=\"hljs-string\">'import'</span>: <span class=\"hljs-string\">'~kpc/styles/themes/ksyun/index.styl'</span>,\n+                  },\n+                }\n+              ),\n+            },\n             <span class=\"hljs-comment\">// \"file\" loader makes sure those assets get served by WebpackDevServer.</span>\n             <span class=\"hljs-comment\">// When you `import` an asset, you get its (virtual) filename.</span>\n             <span class=\"hljs-comment\">// In production, they would get copied to the `build` folder.</span>\n</code></pre>\n<blockquote>\n<p>如果主题没有生效，请检查<code>resolve.alias.kpc</code>是否指向了<code>kpc/@stylus</code></p>\n</blockquote>\n<h1 id='header-%E4%BD%BF%E7%94%A8'>使用</h1><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span> from <span class=\"hljs-symbol\">'reac</span>t';\n<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-type\">Button</span>} from <span class=\"hljs-symbol\">'kpc</span>/components/button';\n<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-type\">Message</span>} from <span class=\"hljs-symbol\">'kpc</span>/components/message';\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    hello() {\n        <span class=\"hljs-type\">Message</span>.success(<span class=\"hljs-symbol\">'Welcome</span> to kpc world!');\n    }\n    render() {\n        <span class=\"hljs-keyword\">return</span> &lt;<span class=\"hljs-type\">Button</span> onClick={<span class=\"hljs-keyword\">this</span>.hello}&gt;<span class=\"hljs-type\">Hello</span> <span class=\"hljs-type\">World</span>&lt;/<span class=\"hljs-type\">Button</span>&gt;\n    }\n}\n</code></pre>\n<h1 id='header-%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E'>语法说明</h1><p>文档中针对intact的例子，我们只需要做以下写法上的转换即可</p>\n<div class=\"k-table k-border\">\n                    <div class=\"k-table-wrapper\">\n                        <div class=\"k-thead\">\n                            <table>\n                                <thead><tr>\n<th>类别</th>\n<th>intact写法</th>\n<th>react写法</th>\n<th>说明</th>\n</tr>\n</thead>\n                            </table>\n                        </div>\n                        <div class=\"k-tbody\">\n                            <table>\n                                <tbody><tr>\n<td>事件</td>\n<td><code>ev-click</code></td>\n<td><code>onClick</code></td>\n<td>保留React事件命名风格，<code>on</code> + 事件名首字母大写</td>\n</tr>\n<tr>\n<td>默认事件</td>\n<td><code>ev-$change:value</code></td>\n<td><code>on$change-value</code></td>\n<td>React属性名不支持冒号(:)，改为连字符(-)即可</td>\n</tr>\n<tr>\n<td>事件回调传参</td>\n<td><code>ev-click={{ self.onClick.bind(self, data) }}</code></td>\n<td><code>onClick={this.onClick.bind(this, data)}</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>属性</td>\n<td><code>name={{ self.get(&#39;name&#39;) }}</code></td>\n<td><code>name={this.state.name}</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>block</td>\n<td><code>&lt;Dialog&gt;&lt;b:header&gt;&lt;div&gt;header&lt;/div&gt;&lt;/b:header&gt;&lt;/Dialog&gt;</code></td>\n<td><code>&lt;Dialog b-header={&lt;div&gt;header&lt;/div&gt;} /&gt;</code></td>\n<td><code>b:header</code>block对应React的属性<code>b-header</code></td>\n</tr>\n<tr>\n<td>block parent()</td>\n<td><code>&lt;b:header&gt;{{ parent() }}header&lt;/b:header&gt;</code></td>\n<td>不支持引用父组件定义的内容</td>\n<td>-</td>\n</tr>\n<tr>\n<td>带参数的block</td>\n<td><code>&lt;Transfer&gt;&lt;b:label params=&quot;data&quot;&gt;&lt;div&gt;{{ data.name }}&lt;/div&gt;&lt;/b:label&gt;&lt;/Transfer&gt;</code></td>\n<td><code>&lt;Transfer b-label={(data) =&gt; &lt;div&gt;{data.name}&lt;/div&gt;} /&gt;</code></td>\n<td><code>b-lablel</code>属性值为函数</td>\n</tr>\n<tr>\n<td>双向绑定任意属性 <code>@since intact-vue@0.3.7</code></td>\n<td><code>v-model:name=&quot;name&quot;</code></td>\n<td><code>on$change-name={(c, v) =&gt; this.setState({name: v})} name={this.state.name}</code></td>\n<td>React不支持<code>v-model</code>语法糖，改为属性和事件的方式即可</td>\n</tr>\n</tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div><p>另外当需要将vNode作为属性传给kpc组件时，需要使用<code>Intact.normalize()</code>方法处理vNode</p>\n<blockquote>\n<p>如果是作为子元素<code>children</code>，则没有必要<code>normalize</code>，因为兼容层默认会normalize子元素</p>\n</blockquote>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">React</span> from <span class=\"hljs-symbol\">'reac</span>t';\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Intact</span> from <span class=\"hljs-symbol\">'intac</span>t';\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Badge</span> from <span class=\"hljs-symbol\">'kpc</span>/components/badge';\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    render() {\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"hljs-comment\">// 作为属性，需要normalize</span>\n            &lt;<span class=\"hljs-type\">Badge</span> text={<span class=\"hljs-type\">Intact</span>.normalize(&lt;i&gt;test&lt;/i&gt;)}&gt;\n                &lt;div&gt;test&lt;/div&gt;\n            &lt;/<span class=\"hljs-type\">Badge</span>&gt;\n        )\n    }\n}\n</code></pre>\n<blockquote>\n<p><code>Table</code>组件的<code>scheme</code>属性中<code>template</code>字段返回的vNode无需<code>normalize</code>，因为组件内部做了兼容，不过多次调用<code>normalize</code>也没有问题。</p>\n</blockquote>\n",
    "index": 122
}