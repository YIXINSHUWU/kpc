{
    "setting": {
        "title": "Vue中使用",
        "order": 1.1,
        "sidebar": "doc"
    },
    "catalogs": [],
    "contents": "<h1 id='header-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C'>准备工作</h1><p>在学习使用kpc之前，假设你已经掌握了以下知识：</p>\n<ol>\n<li><a href=\"https://webpack.js.org/\">webpack</a> + <a href=\"https://babeljs.io/\">babel</a></li>\n<li><a href=\"https://cn.vuejs.org/index.html\">Vue</a></li>\n</ol>\n<h1 id='header-%E5%AE%89%E8%A3%85'>安装</h1><pre><code class=\"hljs js\">npm <span class=\"hljs-keyword\">install</span> kpc -S\n</code></pre>\n<h1 id='header-CDN'>CDN</h1><p>通过<a href=\"https://cdn.jsdelivr.net/npm/kpc/dist/\">cdn.jsdelivr.net/npm/kpc/dist/</a>可以直接引入最新版kpc，建议使用锁定版本地址，例如：<a href=\"https://cdn.jsdelivr.net/npm/kpc@1.0.0/dist/\">cdn.jsdelivr.net/npm/kpc@0.5.14/dist/</a></p>\n<pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>kpc-demo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"IE=edge, chrome=1\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"Cache-Control\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"no-siteapp\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"//cdn.jsdelivr.net/npm/kpc/dist/kpc.css\"</span> /&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 将上述kpc.css替换成ksyun.css，可以使用ksyun主题 --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"//cdn.jsdelivr.net/npm/kpc/dist/ksyun.css\" /&gt; --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">k-button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"hello\"</span>&gt;</span>Hello world<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">k-button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"//cdn.jsdelivr.net/npm/vue\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"//cdn.jsdelivr.net/npm/kpc/dist/kpc.vue.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n        Vue.use(Kpc);\n        <span class=\"hljs-keyword\">new</span> Vue({\n            el: <span class=\"hljs-string\">'#app'</span>,\n            methods: {\n                hello: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n                    <span class=\"hljs-keyword\">this</span>.$message.success(<span class=\"hljs-string\">'Welcome to kpc world!'</span>);\n                }\n            }\n        });\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<h1 id='header-Vue%20CLI%203'>Vue CLI 3</h1><p>推荐使用<code>@vue/cli@3.3.0</code>及以上的版本进行项目初始化</p>\n<h2 id='header-%E5%AE%89%E8%A3%85%E5%B9%B6%E5%88%9D%E5%A7%8B%E5%8C%96'>安装并初始化</h2><pre><code class=\"hljs shell\"><span class=\"hljs-attr\">npm</span> <span class=\"hljs-string\">install -g @vue/cli</span>\n<span class=\"hljs-attr\">vue</span> <span class=\"hljs-string\">create hello-world</span>\n<span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">hello-word</span>\n<span class=\"hljs-attr\">npm</span> <span class=\"hljs-string\">install kpc -S</span>\n</code></pre>\n<h2 id='header-%E6%96%B0%E5%A2%9E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6vue.config.js'>新增配置文件<code>vue.config.js</code></h2><p>在项目根目录下创建<code>vue.config.js</code>文件，内容如下：</p>\n<pre><code class=\"hljs js\">module.exports = {\n    <span class=\"hljs-symbol\">configureWebpack:</span> {\n        <span class=\"hljs-symbol\">resolve:</span> {\n            <span class=\"hljs-symbol\">alias:</span> {\n                <span class=\"hljs-regexp\">//</span> <span class=\"hljs-variable\">@since</span> <span class=\"hljs-number\">1.0</span> 推荐直接指向vue编译包\n                <span class=\"hljs-symbol\">kpc:</span> <span class=\"hljs-string\">'kpc/@vue/@css'</span>,\n                <span class=\"hljs-regexp\">//</span> <span class=\"hljs-variable\">@before</span> <span class=\"hljs-number\">1.0</span>\n                /<span class=\"hljs-regexp\">/ kpc: 'kpc/</span><span class=\"hljs-variable\">@css</span><span class=\"hljs-string\">',\n                // intact$: '</span>intact-vue<span class=\"hljs-string\">',\n            }\n        },\n    }\n}</span>\n</code></pre>\n<p>然后就可以引入kpc组件使用了</p>\n<blockquote>\n<p><code>@vue/cli@3.5.0</code>如果浏览器运行报: <code>Cannot assign to read only property...</code>的错误，可以在<code>babel.config.js</code>中添加<code>sourceType: &quot;unambiguous&quot;</code>解决，详见<a href=\"https://github.com/webpack/webpack/issues/4039\">https://github.com/webpack/webpack/issues/4039</a></p>\n</blockquote>\n<h2 id='header-%E5%BC%95%E5%85%A5%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6'>引入主题文件</h2><p>如果你需要引入主题文件，需要安装<code>stylus</code>和<code>stylus-loader</code></p>\n<h3 id='header-%E5%AE%89%E8%A3%85'>安装</h3><pre><code class=\"hljs shell\">npm <span class=\"hljs-keyword\">install</span> stylus stylus-loader -D\n</code></pre>\n<h3 id='header-%E4%BF%AE%E6%94%B9vue.config.js'>修改<code>vue.config.js</code></h3><p>kpc需要指向<code>kpc/@stylus</code>，下面以内置的主题<code>ksyun</code>为例</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">module.exports</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">{</span>\n<span class=\"hljs-attr\">    configureWebpack:</span> <span class=\"hljs-string\">{</span>\n<span class=\"hljs-attr\">        resolve:</span> <span class=\"hljs-string\">{</span>\n<span class=\"hljs-attr\">            alias:</span> <span class=\"hljs-string\">{</span>\n                <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">@since</span> <span class=\"hljs-number\">1.0</span> <span class=\"hljs-string\">推荐直接指向vue编译包</span>\n<span class=\"hljs-attr\">                kpc:</span> <span class=\"hljs-string\">'kpc/@vue/@stylus'</span><span class=\"hljs-string\">,</span>\n\n                <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">@before</span> <span class=\"hljs-number\">1.0</span>\n                <span class=\"hljs-string\">//</span> <span class=\"hljs-attr\">kpc:</span> <span class=\"hljs-string\">'kpc/@stylus'</span><span class=\"hljs-string\">,</span>\n                <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">intact$:</span> <span class=\"hljs-string\">'intact-vue'</span><span class=\"hljs-string\">,</span>\n            <span class=\"hljs-string\">}</span>\n        <span class=\"hljs-string\">},</span>\n<span class=\"hljs-attr\">        module:</span> <span class=\"hljs-string\">{</span>\n<span class=\"hljs-attr\">            rules:</span> <span class=\"hljs-string\">[</span>\n                <span class=\"hljs-string\">{</span>\n<span class=\"hljs-attr\">                    test:</span> <span class=\"hljs-string\">/\\.styl$/,</span>\n<span class=\"hljs-attr\">                    use:</span> <span class=\"hljs-string\">[</span>\n                        <span class=\"hljs-string\">{</span>\n<span class=\"hljs-attr\">                            loader:</span> <span class=\"hljs-string\">'stylus-loader'</span><span class=\"hljs-string\">,</span>\n<span class=\"hljs-attr\">                            options:</span> <span class=\"hljs-string\">{</span>\n                                <span class=\"hljs-string\">'include css'</span><span class=\"hljs-string\">:</span> <span class=\"hljs-literal\">true</span><span class=\"hljs-string\">,</span>\n                                <span class=\"hljs-string\">'resolve url'</span><span class=\"hljs-string\">:</span> <span class=\"hljs-literal\">true</span><span class=\"hljs-string\">,</span>\n<span class=\"hljs-attr\">                                'import':</span> <span class=\"hljs-string\">'~kpc/styles/themes/ksyun/index.styl'</span>\n                            <span class=\"hljs-string\">}</span>\n                        <span class=\"hljs-string\">}</span>\n                    <span class=\"hljs-string\">]</span>\n                <span class=\"hljs-string\">}</span>\n            <span class=\"hljs-string\">]</span>\n        <span class=\"hljs-string\">}</span>\n    <span class=\"hljs-string\">}</span>\n<span class=\"hljs-string\">}</span>\n</code></pre>\n<blockquote>\n<p>如果主题没有生效，请检查<code>resolve.alias.kpc</code>是否指向了<code>kpc/@vue/@stylus</code></p>\n</blockquote>\n<p>如果采用链式写法，不要直接修改<code>stylus-loader</code>配置，可以采用<code>css</code>配置项来配置，如下所示：</p>\n<pre><code class=\"hljs js\">module.exports = {\n    chainWebpack: config =&gt; {\n        config.<span class=\"hljs-built_in\">resolve</span>.alias\n            .<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">'kpc'</span>, <span class=\"hljs-string\">'kpc/@vue/@stylus'</span>)\n    },\n    <span class=\"hljs-keyword\">cs</span><span class=\"hljs-variable\">s:</span> {\n        loaderOption<span class=\"hljs-variable\">s:</span> {\n            stylu<span class=\"hljs-variable\">s:</span> {\n                <span class=\"hljs-string\">'include css'</span>: true,\n                <span class=\"hljs-string\">'resolve url'</span>: true,\n                impor<span class=\"hljs-variable\">t:</span> `~kpc/styles/themes/ksyun/<span class=\"hljs-built_in\">index</span>.styl`\n            }\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<p><code>@vue/cli@3.0</code>版本如果报找不到<code>babel-types</code>的错误，可以安装<code>babel-types</code>重启项目即可</p>\n</blockquote>\n<h1 id='header-Vue%20CLI%202'>Vue CLI 2</h1><h2 id='header-%E5%AE%89%E8%A3%85%E5%B9%B6%E5%88%9D%E5%A7%8B%E5%8C%96'>安装并初始化</h2><pre><code class=\"hljs shell\"><span class=\"hljs-attr\">npm</span> <span class=\"hljs-string\">install -g vue-cli</span>\n<span class=\"hljs-attr\">vue</span> <span class=\"hljs-string\">init webpack hello-world</span>\n<span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">hello-world</span>\n<span class=\"hljs-attr\">npm</span> <span class=\"hljs-string\">install kpc -S</span>\n</code></pre>\n<h2 id='header-%E4%BF%AE%E6%94%B9build%2Fwebpack.base.conf.js'>修改<code>build/webpack.base.conf.js</code></h2><p>添加<code>alias</code>配置</p>\n<pre><code class=\"hljs diff\">--- a/build/webpack<span class=\"hljs-selector-class\">.base</span><span class=\"hljs-selector-class\">.conf</span><span class=\"hljs-selector-class\">.js</span>\n+++ b/build/webpack<span class=\"hljs-selector-class\">.base</span><span class=\"hljs-selector-class\">.conf</span><span class=\"hljs-selector-class\">.js</span>\n@@ -<span class=\"hljs-number\">27</span>,<span class=\"hljs-number\">6</span> +<span class=\"hljs-number\">27</span>,<span class=\"hljs-number\">8</span> @@ module<span class=\"hljs-selector-class\">.exports</span> = {\n     alias: {\n       <span class=\"hljs-string\">'vue$'</span>: <span class=\"hljs-string\">'vue/dist/vue.esm.js'</span>,\n       <span class=\"hljs-string\">'@'</span>: resolve(<span class=\"hljs-string\">'src'</span>),\n+      <span class=\"hljs-string\">'kpc'</span>: <span class=\"hljs-string\">'kpc/@vue/@css'</span>,\n     }\n   },\n</code></pre>\n<h2 id='header-%E5%BC%95%E5%85%A5%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6'>引入主题文件</h2><p>如果你需要引入主题文件，需要安装<code>stylus</code> <code>stylus-loader</code></p>\n<pre><code class=\"hljs shell\">npm <span class=\"hljs-keyword\">install</span> stylus stylus-loader -D\n</code></pre>\n<p>修改<code>build/webpack.base.conf.js</code></p>\n<pre><code class=\"hljs diff\">--- a/build/webpack<span class=\"hljs-selector-class\">.base</span><span class=\"hljs-selector-class\">.conf</span><span class=\"hljs-selector-class\">.js</span>\n+++ b/build/webpack<span class=\"hljs-selector-class\">.base</span><span class=\"hljs-selector-class\">.conf</span><span class=\"hljs-selector-class\">.js</span>\n@@ -<span class=\"hljs-number\">27</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">27</span>,<span class=\"hljs-number\">7</span> @@ module<span class=\"hljs-selector-class\">.exports</span> = {\n     alias: {\n       <span class=\"hljs-string\">'vue$'</span>: <span class=\"hljs-string\">'vue/dist/vue.esm.js'</span>,\n       <span class=\"hljs-string\">'@'</span>: resolve(<span class=\"hljs-string\">'src'</span>),\n-      <span class=\"hljs-string\">'kpc'</span>: <span class=\"hljs-string\">'kpc/@vue/@css'</span>,\n+      <span class=\"hljs-string\">'kpc'</span>: <span class=\"hljs-string\">'kpc/@vue/@stylus'</span>,\n     }\n   },\n</code></pre>\n<p>修改<code>build/utils.js</code></p>\n<pre><code class=\"hljs diff\">--- a<span class=\"hljs-regexp\">/build/</span>utils.js\n+++ b<span class=\"hljs-regexp\">/build/</span>utils.js\n@@ <span class=\"hljs-number\">-62</span>,<span class=\"hljs-number\">7</span> +<span class=\"hljs-number\">62</span>,<span class=\"hljs-number\">11</span> @@ exports.cssLoaders = function (options) {\n<span class=\"hljs-symbol\">     sass:</span> generateLoaders(<span class=\"hljs-string\">'sass'</span>, { <span class=\"hljs-string\">indentedSyntax:</span> <span class=\"hljs-literal\">true</span> }),\n<span class=\"hljs-symbol\">     scss:</span> generateLoaders(<span class=\"hljs-string\">'sass'</span>),\n<span class=\"hljs-symbol\">     stylus:</span> generateLoaders(<span class=\"hljs-string\">'stylus'</span>),\n-    <span class=\"hljs-string\">styl:</span> generateLoaders(<span class=\"hljs-string\">'stylus'</span>)\n+    <span class=\"hljs-string\">styl:</span> generateLoaders(<span class=\"hljs-string\">'stylus'</span>, {\n+      <span class=\"hljs-string\">'include css'</span>: <span class=\"hljs-literal\">true</span>,\n+      <span class=\"hljs-string\">'resolve url'</span>: <span class=\"hljs-literal\">true</span>,\n+      <span class=\"hljs-string\">'import'</span>: <span class=\"hljs-string\">'~kpc/styles/themes/ksyun/index.styl'</span>,\n+    })\n   }\n }\n</code></pre>\n<h1 id='header-%E5%85%A8%E9%87%8F%E5%BC%95%E5%85%A5'>全量引入</h1><p>全量引入使用vue提供的<code>use</code>方法，一次性注册所有组件</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>;\n<span class=\"hljs-keyword\">import</span> Kpc <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc'</span>;\n\nVue.use(Kpc);\n</code></pre>\n<blockquote>\n<p>Vue不能使用<code>Switch</code>作为组件名，所以所有的组件命名为<code>KComponent</code>形式，例如：<code>KButton</code>，全量安装后，你可以在模板中使用<code>KButton</code>或者<code>k-button</code>作为元素名</p>\n</blockquote>\n<h1 id='header-%E6%8C%89%E9%9C%80%E5%BC%95%E5%85%A5'>按需引入</h1><p>按需引入只需要在用到该组件才引入，可以最大化减小打包文件的体积</p>\n<pre><code class=\"hljs vue\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"hello\"</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> Button <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/button'</span>;\n<span class=\"hljs-keyword\">import</span> Message <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/message'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: {\n        Button\n    },\n\n    <span class=\"hljs-attr\">methods</span>: {\n        hello() {\n            Message.success(<span class=\"hljs-string\">'Welcome to kpc world!'</span>);\n        }\n    }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h1 id='header-%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E'>语法说明</h1><p>intact-vue从底层vNode上做了intact到vue的兼容，文档中针对intact的例子，我们只需要做以下写法上的转换即可</p>\n<div class=\"k-table k-border\">\n                    <div class=\"k-table-wrapper\">\n                        <div class=\"k-thead\">\n                            <table>\n                                <thead><tr>\n<th>类别</th>\n<th>intact写法</th>\n<th>vue写法</th>\n</tr>\n</thead>\n                            </table>\n                        </div>\n                        <div class=\"k-tbody\">\n                            <table>\n                                <tbody><tr>\n<td>事件</td>\n<td><code>ev-click</code></td>\n<td><code>@click</code></td>\n</tr>\n<tr>\n<td>事件回调传参</td>\n<td><code>ev-click={{ self.onClick.bind(self, data) }}</code></td>\n<td><code>@click=&quot;onClick(data)&quot;</code></td>\n</tr>\n<tr>\n<td>属性</td>\n<td><code>name={{ self.get(&#39;name&#39;) }}</code></td>\n<td><code>:name=&quot;name&quot;</code></td>\n</tr>\n<tr>\n<td>block</td>\n<td><code>&lt;b:header&gt;header&lt;/b:header&gt;</code></td>\n<td><code>&lt;template slot=&quot;header&quot;&gt;header&lt;/template&gt;</code></td>\n</tr>\n<tr>\n<td>block parent()</td>\n<td><code>&lt;b:header&gt;{{ parent() }}header&lt;/b:header&gt;</code></td>\n<td>vue不支持<code>parent</code>引用父组件中定义的模板，你需要直接拷贝父组件定义的模板</td>\n</tr>\n<tr>\n<td>带参数的block</td>\n<td><code>&lt;Transfer&gt;&lt;b:label params=&quot;data&quot;&gt;&lt;div&gt;{{ data.name }}&lt;/div&gt;&lt;/b:label&gt;&lt;/Transfer&gt;</code></td>\n<td><code>&lt;Transfer&gt;&lt;div slot=&quot;label&quot; slot-scope=&quot;data&quot;&gt;{{ data.name }}&lt;/div&gt;&lt;/Transfer&gt;</code></td>\n</tr>\n<tr>\n<td>双向绑定任意属性 <code>@since intact-vue@0.3.7</code></td>\n<td><code>v-model:name=&quot;name&quot;</code></td>\n<td><code>:name.sync=&quot;name&quot;</code></td>\n</tr>\n</tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div><h2 id='header-%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E7%89%B9%E6%80%A7'>不支持的特性</h2><ol>\n<li>不支持事件的.native修饰符<pre><code class=\"hljs vue\"> &lt;<span class=\"hljs-selector-tag\">Button</span> @<span class=\"hljs-keyword\">click</span>.<span class=\"hljs-keyword\">native</span>=\"<span class=\"hljs-keyword\">click</span>\"&gt;<span class=\"hljs-keyword\">default</span>&lt;/<span class=\"hljs-keyword\">Button</span>&gt;\n</code></pre>\n</li>\n<li>多余的属性不会被自动添加到组件渲染的DOM上，而是被直接忽略</li>\n<li><del>不支持scoped style，因为KPC组件渲染不会添加data-v-id</del> <code>@since v0.8.0 支持</code><pre><code class=\"hljs vue\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>&gt;</span><span class=\"css\"> <span class=\"hljs-selector-class\">.k-btn</span> { <span class=\"hljs-attribute\">color</span>: red;  } </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></pre>\n</li>\n<li>不支持 <a href=\"https://vuejs.org/v2/guide/class-and-style.html#Multiple-Values\">Multiple values</a> style<pre><code class=\"hljs vue\"><span class=\"xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">v-bind:style</span>=<span class=\"hljs-string\">\"</span></span></span><span class=\"hljs-template-variable\">{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n</code></pre>\n</li>\n<li>不要在KPC组件上直接做动画，如果要动画，可以包一层div<pre><code class=\"hljs vue\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"fade\"</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"show\"</span>&gt;</span>default<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n</code></pre>\n 可以包一层div<pre><code class=\"hljs vue\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"fade\"</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"show\"</span>&gt;</span>\n         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>default<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n</code></pre>\n</li>\n</ol>\n<p>另外当需要在js中使用<code>h()</code>方法创建vNode，然后作为属性传给kpc组件时，需要使用<code>Intact.normalize()</code>方法将vNode包起来</p>\n<blockquote>\n<p>如果是作为子元素<code>children</code>，则没有必要<code>normalize</code>，因为兼容层默认会normalize子元素</p>\n</blockquote>\n<pre><code class=\"hljs vue\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span> <span class=\"hljs-attr\">:text</span>=<span class=\"hljs-string\">\"text\"</span>&gt;</span></span><span class=\"hljs-template-variable\">{{ children }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> Badge <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/badge'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: {\n        Badge\n    },\n    data() {\n        <span class=\"hljs-keyword\">const</span> h = <span class=\"hljs-keyword\">this</span>.$createElement;\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-comment\">// 作为属性，需要normalize</span>\n            text: Intact.normalize(h(<span class=\"hljs-string\">'i'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'test'</span>)),\n            <span class=\"hljs-comment\">// 作为子元素，没有必要normalize</span>\n            children: h(<span class=\"hljs-string\">'div'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'test'</span>)\n        }\n    }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n<blockquote>\n<p><code>Table</code>组件的<code>scheme</code>属性中<code>template</code>字段返回的vNode无需<code>normalize</code>，因为组件内部做了兼容，不过多次调用<code>normalize</code>也没有问题。</p>\n</blockquote>\n",
    "index": 109
}