{
    "setting": {
        "title": "静态方法",
        "order": 0.1
    },
    "catalogs": [],
    "contents": "<p>组件提供了4个静态方法，用于弹出4种不同类型的提示窗口：<code>success</code> <code>warning</code> <code>error</code> <code>confirm</code>，该方法会返回<code>Promise</code>对象，成功回调代表点击了“确认”按钮，失败回调代表点击了“取消”按钮</p>\n<p>如果传入<code>title</code>字段，弹窗样式会有所不同</p>\n<blockquote>\n<p>如果你在<code>Vue</code>中调用静态方式，不要尝试通过<code>scoped style</code>修改弹窗样式，因为它们不会添加<code>data-v-id</code>，你将选择不到弹窗元素</p>\n</blockquote>\n",
    "index": 54,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> {Button, ButtonGroup} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/button'</span>;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> \n            <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">{{</span> ['<span class=\"hljs-attr\">success</span>', '<span class=\"hljs-attr\">warning</span>', '<span class=\"hljs-attr\">error</span>', '<span class=\"hljs-attr\">confirm</span>'] }}\n            <span class=\"hljs-attr\">ev-click</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">self.showDialog.bind</span>(<span class=\"hljs-attr\">self</span>, <span class=\"hljs-attr\">value</span>) }}\n        &gt;</span>Show {{ value[0].toUpperCase() + value.substring(1) }} Dialog<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> \n            <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">{{</span> ['<span class=\"hljs-attr\">success</span>', '<span class=\"hljs-attr\">warning</span>', '<span class=\"hljs-attr\">error</span>', '<span class=\"hljs-attr\">confirm</span>'] }}\n            <span class=\"hljs-attr\">ev-click</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">self.showDialogWithTitle.bind</span>(<span class=\"hljs-attr\">self</span>, <span class=\"hljs-attr\">value</span>) }}\n        &gt;</span>Show {{ value[0].toUpperCase() + value.substring(1) }} Dialog with Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n\n<span class=\"hljs-keyword\">import</span> Dialog <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/dialog'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    showDialog(type) {\n        Dialog[type]({\n            <span class=\"hljs-attr\">content</span>: type,\n        }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'clicked ok button'</span>);\n        }, () =&gt; {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'clicked cancel button'</span>);\n        });\n    }\n\n    showDialogWithTitle(type) {\n        Dialog[type]({\n            <span class=\"hljs-attr\">title</span>: type[<span class=\"hljs-number\">0</span>].toUpperCase() + type.substring(<span class=\"hljs-number\">1</span>),\n            <span class=\"hljs-attr\">content</span>: type + <span class=\"hljs-string\">' dialog'</span>,\n        }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'clicked ok button'</span>);\n        }, () =&gt; {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'clicked cancel button'</span>);\n        });\n    }\n}</code></pre>"
        },
        {
            "language": "vue",
            "content": "<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> \n                <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(value, key) in ['success', 'warning', 'error', 'confirm']\"</span>\n                @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"showDialog(value)\"</span>\n            &gt;</span>Show {{ value[0].toUpperCase() + value.substring(1) }} Dialog<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> \n                <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(value, key) in ['success', 'warning', 'error', 'confirm']\"</span>\n                @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"showDialogWithTitle(value)\"</span>\n            &gt;</span>Show {{ value[0].toUpperCase() + value.substring(1) }} Dialog with Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> {Button, ButtonGroup} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/button'</span>;\n\n<span class=\"hljs-keyword\">import</span> Dialog <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/dialog'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: {\n        Button, ButtonGroup\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n        showDialog(type) {\n            Dialog[type]({\n                <span class=\"hljs-attr\">content</span>: type,\n            }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'clicked ok button'</span>);\n            }, () =&gt; {\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'clicked cancel button'</span>);\n            });\n        },\n        showDialogWithTitle(type) {\n            Dialog[type]({\n                <span class=\"hljs-attr\">title</span>: type[<span class=\"hljs-number\">0</span>].toUpperCase() + type.substring(<span class=\"hljs-number\">1</span>),\n                <span class=\"hljs-attr\">content</span>: type + <span class=\"hljs-string\">' dialog'</span>,\n            }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'clicked ok button'</span>);\n            }, () =&gt; {\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'clicked cancel button'</span>);\n            });\n        },\n    },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>"
        },
        {
            "language": "jsx",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> {Button, ButtonGroup} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/button'</span>;\n\n<span class=\"hljs-keyword\">import</span> Dialog <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/dialog'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>(props) {\n        <span class=\"hljs-keyword\">super</span>(props);\n        <span class=\"hljs-keyword\">this</span>.showDialog = <span class=\"hljs-keyword\">this</span>.showDialog.bind(<span class=\"hljs-keyword\">this</span>);\n        <span class=\"hljs-keyword\">this</span>.showDialogWithTitle = <span class=\"hljs-keyword\">this</span>.showDialogWithTitle.bind(<span class=\"hljs-keyword\">this</span>);\n    }\n\n    showDialog(type) {\n        Dialog[type]({\n            <span class=\"hljs-attr\">content</span>: type,\n        }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'clicked ok button'</span>);\n        }, () =&gt; {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'clicked cancel button'</span>);\n        });\n    }\n    \n    showDialogWithTitle(type) {\n        Dialog[type]({\n            <span class=\"hljs-attr\">title</span>: type[<span class=\"hljs-number\">0</span>].toUpperCase() + type.substring(<span class=\"hljs-number\">1</span>),\n            <span class=\"hljs-attr\">content</span>: type + <span class=\"hljs-string\">' dialog'</span>,\n        }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'clicked ok button'</span>);\n        }, () =&gt; {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'clicked cancel button'</span>);\n        });\n    }\n    \n    render() {\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n                    {['success', 'warning', 'error', 'confirm'].map((value, key) =&gt; {\n                        return (\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> \n                                <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.showDialog.bind(this,</span> <span class=\"hljs-attr\">value</span>)}\n                            &gt;</span>Show {value[0].toUpperCase() + value.substring(1)} Dialog<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n                        )\n                    })}\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n                    {['success', 'warning', 'error', 'confirm'].map((value, key) =&gt; {\n                        return (\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> \n                                <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.showDialogWithTitle.bind(this,</span> <span class=\"hljs-attr\">value</span>)}\n                            &gt;</span>Show {value[0].toUpperCase() + value.substring(1)} Dialog with Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n                        )\n                    })}\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n        )\n    }\n}</code></pre>"
        }
    ]
}