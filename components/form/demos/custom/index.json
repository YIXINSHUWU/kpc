{
    "setting": {
        "title": "自定义验证规则",
        "order": 1
    },
    "catalogs": [],
    "contents": "<p>当内置的验证规则不能满足需求时，我们还可以自定义验证规则。有如下两种方式添加规则：</p>\n<ol>\n<li>通过<code>Form.addMethod()</code>静态方法添加全局验证规则，由于是全局的，我们可以在任意地方的\n<code>FormItem</code>中使用该规则。使用方法见API说明</li>\n<li>通过<code>FormItem</code>的<code>rules</code>属性，定义局部规则，该规则只对该<code>FormItem</code>有效</li>\n</ol>\n<p>本例中，我们添加一条全局规则<code>letter</code>用来验证只能输入字母，同时添加一条局部规则<code>unique</code>来验证所有输入必须不同</p>\n<blockquote>\n<p>验证方法中<code>param</code>，即为使用该规则时传入的参数，例如本例中的<code>letter: true</code>，<code>true</code>会作为<code>param</code>参数传给验证方法。当然我们还可以指定任意值，只要不是<code>false</code>就行，因为<code>false</code>代表不验证</p>\n</blockquote>\n",
    "index": 89,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> {Form, FormItem} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/form'</span>;\n<span class=\"hljs-keyword\">import</span> {Input} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/input'</span>;\n<span class=\"hljs-keyword\">import</span> {Button} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/button'</span>;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormItem</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"描述\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormItem</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">self.get</span>('<span class=\"hljs-attr\">descriptions</span>') }}\n            <span class=\"hljs-attr\">model</span>=<span class=\"hljs-string\">{{</span> `<span class=\"hljs-attr\">descriptions</span>[${<span class=\"hljs-attr\">key</span>}]` }}\n            <span class=\"hljs-attr\">hideLabel</span>\n            <span class=\"hljs-attr\">rules</span>=<span class=\"hljs-string\">{{</span> {\n                <span class=\"hljs-attr\">required:</span> <span class=\"hljs-attr\">true</span>, \n                // 自定义全局规则\n                <span class=\"hljs-attr\">letter:</span> <span class=\"hljs-attr\">true</span>,\n                // 自定义局部规则，所有描述必须不重复\n                <span class=\"hljs-attr\">unique:</span> (<span class=\"hljs-attr\">value</span>) =&gt;</span> {\n                    let count = 0;\n                    self.get('descriptions').find(item =&gt; {\n                        if (item === value) count++;\n                        return count &gt; 1;\n                    });\n\n                    // 直接返回错误文案，或者也可以单独定义messages为{unique: '不能相同'}\n                    return count === 1 || '不能相同';\n                }\n            } }}\n        &gt;\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">{{</span> `<span class=\"hljs-attr\">descriptions</span>[${<span class=\"hljs-attr\">key</span>}]` }} /&gt;</span>    \n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">b:append</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">ev-click</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">self.remove.bind</span>(<span class=\"hljs-attr\">self</span>, <span class=\"hljs-attr\">key</span>) }}&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">b:append</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormItem</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">ev-click</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">self.add</span> }}&gt;</span>添加<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormItem</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Form</span>&gt;</span></span></code></pre>"
        },
        {
            "language": "styl",
            "content": "<pre><code class=\"hljs styl\"><span class=\"hljs-selector-class\">.k-form-item</span>\n    <span class=\"hljs-selector-class\">.k-form-item</span>\n        <span class=\"hljs-attribute\">margin-bottom</span> <span class=\"hljs-number\">20px</span>\n\n@media (<span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">768px</span>)\n    <span class=\"hljs-selector-class\">.k-form-item</span>\n        <span class=\"hljs-attribute\">width</span> <span class=\"hljs-number\">100%</span>\n        <span class=\"hljs-selector-class\">.k-input</span>\n            <span class=\"hljs-attribute\">width</span> <span class=\"hljs-number\">100%</span>\n        <span class=\"hljs-selector-class\">.k-label</span>\n            <span class=\"hljs-attribute\">width</span> auto</code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./index.styl'</span>; \n\n<span class=\"hljs-keyword\">import</span> {Form} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/form'</span>;\n\n<span class=\"hljs-comment\">// 添加全局规则</span>\nForm.addMethod(<span class=\"hljs-string\">'letter'</span>, (value, item, param) =&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-regexp\">/^[a-z|A-Z]+$/</span>.test(value);\n}, <span class=\"hljs-string\">'只能输入字母'</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    defaults() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">descriptions</span>: [<span class=\"hljs-string\">''</span>, <span class=\"hljs-string\">''</span>]\n        }\n    }\n\n    add() {\n        <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'descriptions'</span>, <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'descriptions'</span>).concat(<span class=\"hljs-string\">''</span>));\n    }\n\n    remove(index) {\n        <span class=\"hljs-keyword\">const</span> descriptions = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'descriptions'</span>).slice(<span class=\"hljs-number\">0</span>);\n        descriptions.splice(index, <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'descriptions'</span>, descriptions);\n    }\n}</code></pre>"
        },
        {
            "language": "vue",
            "content": "<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormItem</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"描述\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormItem</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(value, key) in descriptions\"</span>\n                <span class=\"hljs-attr\">:model</span>=<span class=\"hljs-string\">\"`descriptions[${key}]`\"</span>\n                <span class=\"hljs-attr\">hideLabel</span>\n                <span class=\"hljs-attr\">:rules</span>=<span class=\"hljs-string\">\"{\n                    required: true, \n                    // 自定义全局规则\n                    letter: true,\n                    // 自定义局部规则，所有描述必须不重复\n                    unique: (value) =&gt; {\n                        let count = 0;\n                        descriptions.find(item =&gt; {\n                            if (item === value) count++;\n                            return count &gt; 1;\n                        });\n    \n                        // 直接返回错误文案，或者也可以单独定义messages为{unique: '不能相同'}\n                        return count === 1 || '不能相同';\n                    }\n                }\"</span>\n            &gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"descriptions[key]\"</span> /&gt;</span>    \n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"append\"</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"remove(key)\"</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormItem</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"add\"</span>&gt;</span>添加<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormItem</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> {Form, FormItem} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/form'</span>;\n<span class=\"hljs-keyword\">import</span> {Input} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/input'</span>;\n<span class=\"hljs-keyword\">import</span> {Button} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/button'</span>;\n\n\n<span class=\"hljs-comment\">// 添加全局规则</span>\nForm.addMethod(<span class=\"hljs-string\">'letter'</span>, (value, item, param) =&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-regexp\">/^[a-z|A-Z]+$/</span>.test(value);\n}, <span class=\"hljs-string\">'只能输入字母'</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: {\n        Form, FormItem, Input, Button\n    },\n    data() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-string\">\"descriptions\"</span>: [\n                <span class=\"hljs-string\">\"\"</span>,\n                <span class=\"hljs-string\">\"\"</span>\n            ],\n            <span class=\"hljs-string\">\"descriptions[key]\"</span>: <span class=\"hljs-literal\">null</span>\n        }\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n        add() {\n            <span class=\"hljs-keyword\">this</span>.descriptions.push(<span class=\"hljs-string\">''</span>);\n        },\n        remove(index) {\n            <span class=\"hljs-keyword\">this</span>.descriptions.splice(index, <span class=\"hljs-number\">1</span>);\n        },\n    },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"stylus\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./index.styl\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre>"
        },
        {
            "language": "jsx",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> {Form, FormItem} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/form'</span>;\n<span class=\"hljs-keyword\">import</span> {Input} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/input'</span>;\n<span class=\"hljs-keyword\">import</span> {Button} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/button'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./index.styl'</span>;\n\n<span class=\"hljs-comment\">// 添加全局规则</span>\nForm.addMethod(<span class=\"hljs-string\">'letter'</span>, (value, item, param) =&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-regexp\">/^[a-z|A-Z]+$/</span>.test(value);\n}, <span class=\"hljs-string\">'只能输入字母'</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>(props) {\n        <span class=\"hljs-keyword\">super</span>(props);\n        <span class=\"hljs-keyword\">this</span>.state = {\n            <span class=\"hljs-string\">\"descriptions\"</span>: [\n                <span class=\"hljs-string\">\"\"</span>,\n                <span class=\"hljs-string\">\"\"</span>\n            ]\n        };\n        <span class=\"hljs-keyword\">this</span>._onChangeValue = <span class=\"hljs-keyword\">this</span>._onChangeValue.bind(<span class=\"hljs-keyword\">this</span>);\n        <span class=\"hljs-keyword\">this</span>.add = <span class=\"hljs-keyword\">this</span>.add.bind(<span class=\"hljs-keyword\">this</span>);\n        <span class=\"hljs-keyword\">this</span>.remove = <span class=\"hljs-keyword\">this</span>.remove.bind(<span class=\"hljs-keyword\">this</span>);\n    }\n\n    _onChangeValue(index, c, v) {\n        <span class=\"hljs-keyword\">const</span> descriptions = <span class=\"hljs-keyword\">this</span>.state.descriptions.slice(<span class=\"hljs-number\">0</span>);\n        descriptions[index] = v;\n        <span class=\"hljs-keyword\">this</span>.setState({descriptions});\n    }\n    \n    add() {\n        <span class=\"hljs-keyword\">this</span>.setState({<span class=\"hljs-attr\">descriptions</span>: <span class=\"hljs-keyword\">this</span>.state.descriptions.concat(<span class=\"hljs-string\">''</span>)});\n    }\n    \n    remove(index) {\n        <span class=\"hljs-keyword\">const</span> descriptions = <span class=\"hljs-keyword\">this</span>.state.descriptions.slice(<span class=\"hljs-number\">0</span>);\n        descriptions.splice(index, <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">this</span>.setState({<span class=\"hljs-attr\">descriptions</span>: descriptions});\n    }\n    \n    <span class=\"hljs-comment\">// 注入_context上下文</span>\n    <span class=\"hljs-keyword\">static</span> childContextTypes = {\n        <span class=\"hljs-attr\">_context</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {}\n    }\n    \n    getChildContext() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">_context</span>: <span class=\"hljs-keyword\">this</span>\n        }\n    }\n    \n    render() {\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormItem</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"描述\"</span>&gt;</span>\n                    {this.state.descriptions.map((value, key) =&gt; {\n                        return (\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormItem</span>\n                                <span class=\"hljs-attr\">b-append</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">React.Fragment</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.remove.bind(this,</span> <span class=\"hljs-attr\">key</span>)}&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">React.Fragment</span>&gt;</span>}\n                                model={`descriptions[${key}]`}\n                                hideLabel\n                                rules={{\n                                    required: true, \n                                    // 自定义全局规则\n                                    letter: true,\n                                    // 自定义局部规则，所有描述必须不重复\n                                    unique: (value) =&gt; {\n                                        let count = 0;\n                                        this.state.descriptions.find(item =&gt; {\n                                            if (item === value) count++;\n                                            return count &gt; 1;\n                                        });\n                    \n                                        // 直接返回错误文案，或者也可以单独定义messages为{unique: '不能相同'}\n                                        return count === 1 || '不能相同';\n                                    }\n                                }}\n                            &gt;\n                                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state.descriptions[key]}</span> <span class=\"hljs-attr\">on</span>$<span class=\"hljs-attr\">change-value</span>=<span class=\"hljs-string\">{this._onChangeValue.bind(this,</span> <span class=\"hljs-attr\">key</span>)} /&gt;</span>    \n                            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormItem</span>&gt;</span>\n                        )\n                    })}\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.add}</span>&gt;</span>添加<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormItem</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Form</span>&gt;</span>\n        )\n    }\n}</span></code></pre>"
        }
    ]
}