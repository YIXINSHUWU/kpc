{
    "setting": {
        "title": "布局",
        "order": 3
    },
    "catalogs": [],
    "contents": "<p><code>Diagram</code>封装了<code>mxGraph</code>大部分布局系统，并且保持与<code>mxGraph</code>的命名一致</p>\n<ol>\n<li><code>DStackLayout</code>: 所有子元素横向<code>horizontal</code>或者纵向<code>vertical</code>排列，该布局对所有元素生效</li>\n<li><code>DPartitionLayout</code>: 所有元素横向<code>horizontal</code>或者纵向<code>vertical</code>等分排列，注意所有子元素\n会等分以满足父容器的宽高，该布局对所有元素生效</li>\n<li><code>DTreeLayout</code>: 所有连接元素横向<code>horizontal</code>或者纵向<code>vertical</code>排列，不要存在循环连接，该\n布局仅对连接元素生效，所有非连接元素，放在原始位置（默认：左上角）</li>\n<li><code>DRadialLayout</code>: 所有连接元素辐射排列，不要存在循环连接，该布局仅对连接元素生效，所有非\n连接元素，放在原始位置（默认：左上角）</li>\n<li><code>DFlowLayout</code>: 所有连接元素横向<code>horizontal</code>或者纵向<code>vertical</code>排列，非连接元素会纵向（如\n果<code>type=&quot;horizontal&quot;</code>）或者横向（如果<code>type=&quot;vertical&quot;</code>）排列，该布局对连接元素和非连接都生\n效，但是排列方式不同</li>\n<li><code>DCircleLayout</code>: 所有元素圆形排列，该布局对所有元素生效</li>\n<li><code>DOrganicLayout</code>: 所有连接元素根据力导向排列，该布局仅对连接元素生效，非连接元素放置在\n原始位置。（该布局具有随机性）</li>\n</ol>\n",
    "index": 197,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> {Button, ButtonGroup} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/button'</span>;\n<span class=\"hljs-keyword\">import</span> {Form, FormItem} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/form'</span>;\n<span class=\"hljs-keyword\">import</span> {Diagram, DRectangle, DCircle, DDiamond, DHexagon, DLine} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/diagram'</span>;\n<span class=\"hljs-keyword\">import</span> {Spinner} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/spinner'</span>;\n<span class=\"hljs-keyword\">import</span> {Checkbox} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/checkbox'</span>;\n\n<span class=\"hljs-keyword\">const</span> Layout = <span class=\"hljs-function\">(<span class=\"hljs-params\">{layout, props, children}</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> h(layout, {...props}, children);\n};\n\n<span class=\"hljs-keyword\">const</span> currentLayout = self.get(<span class=\"hljs-string\">'layouts'</span>)[self.get(<span class=\"hljs-string\">'layout'</span>)];\n\n&lt;div&gt;\n    &lt;Form labelWidth=\"150\"&gt;\n        &lt;FormItem label=\"Layout\"&gt;\n            &lt;ButtonGroup v-model=\"layout\" checkType=\"radio\"&gt;\n                &lt;Button v-for={{ self.get('layouts') }}\n                    value={{ key }}\n                &gt;{{ value.Layout.displayName }}&lt;/Button&gt;\n            &lt;/ButtonGroup&gt;\n        &lt;/FormItem&gt;\n        &lt;FormItem v-for={{ currentLayout.props }} label={{ key }}&gt;\n            {{ (() =&gt; {\n                const type = typeof value;\n                const model = `layouts.${self.get('layout')}.props.${key}`;\n\n                switch (type) {\n                    case 'number':\n                        return &lt;Spinner v-model={{ model }} /&gt;;\n                    case 'boolean':\n                        return &lt;Checkbox v-model={{ model }} /&gt;;\n                    case 'string':\n                        return &lt;ButtonGroup v-model={{ model }} checkType=\"radio\"&gt;\n                            &lt;Button v-for={{ currentLayout.Layout.propTypes[key] }} \n                                value={{ value }}\n                            &gt;{{ value }}&lt;/Button&gt;\n                        &lt;/ButtonGroup&gt;\n                }\n            })() }}\n        &lt;/FormItem&gt;\n        &lt;FormItem&gt;\n            &lt;Diagram&gt;\n                &lt;DRectangle width=\"300\" height=\"200\" strokeStyle=\"dotted\"&gt;\n                    &lt;Layout layout={{ currentLayout.Layout }}\n                        props={{ currentLayout.props }}\n                    &gt;\n                        &lt;DRectangle key=\"1\" rounded=\"5\" /&gt;\n                        &lt;DDiamond key=\"2\" /&gt;\n                        &lt;DCircle key=\"3\" /&gt;\n                        &lt;DCircle key=\"4\" /&gt;\n                        &lt;DCircle key=\"5\" /&gt;\n                        &lt;DLine from=\"1\" to=\"2\" strokeStyle=\"dashed\" type=\"rounded\" /&gt;\n                        &lt;DLine from=\"1\" to=\"3\" strokeStyle=\"dashed\" type=\"rounded\" /&gt;\n                    &lt;/Layout&gt;\n                &lt;/DRectangle&gt;\n            &lt;/Diagram&gt;\n        &lt;/FormItem&gt;\n    &lt;/Form&gt;\n&lt;/div&gt;</code></pre>"
        },
        {
            "language": "styl",
            "content": "<pre><code class=\"hljs styl\"><span class=\"hljs-selector-class\">.k-form-item</span>\n    <span class=\"hljs-attribute\">margin-bottom</span> <span class=\"hljs-number\">8px</span></code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./index.styl'</span>; \n\n<span class=\"hljs-keyword\">import</span> {DFlowLayout, DTreeLayout, DRadialLayout, DStackLayout, DPartitionLayout, DCircleLayout, DOrganicLayout} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/diagram'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    defaults() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">layout</span>: <span class=\"hljs-string\">'tree'</span>,\n            <span class=\"hljs-attr\">layouts</span>: {\n                <span class=\"hljs-attr\">stack</span>: {\n                    <span class=\"hljs-attr\">props</span>: {<span class=\"hljs-attr\">spacing</span>: <span class=\"hljs-number\">20</span>, <span class=\"hljs-attr\">fill</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'vertical'</span>, <span class=\"hljs-attr\">resizeParent</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">border</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">wrap</span>: <span class=\"hljs-number\">600</span>},\n                    <span class=\"hljs-attr\">Layout</span>: DStackLayout,\n                },\n                <span class=\"hljs-attr\">partition</span>: {\n                    <span class=\"hljs-attr\">props</span>: {<span class=\"hljs-attr\">spacing</span>: <span class=\"hljs-number\">20</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'vertical'</span>, <span class=\"hljs-attr\">resizeVertices</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">border</span>: <span class=\"hljs-number\">10</span>},\n                    <span class=\"hljs-attr\">Layout</span>: DPartitionLayout,\n                },\n                <span class=\"hljs-attr\">tree</span>: {\n                    <span class=\"hljs-attr\">props</span>: {<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'vertical'</span>, <span class=\"hljs-attr\">resizeParent</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">levelDistance</span>: <span class=\"hljs-number\">30</span>, <span class=\"hljs-attr\">nodeDistance</span>: <span class=\"hljs-number\">16</span>, <span class=\"hljs-attr\">groupPadding</span>: <span class=\"hljs-number\">10</span>},\n                    <span class=\"hljs-attr\">Layout</span>: DTreeLayout,\n                },\n                <span class=\"hljs-attr\">radial</span>: {\n                    <span class=\"hljs-attr\">props</span>: {<span class=\"hljs-attr\">levelDistance</span>: <span class=\"hljs-number\">60</span>, <span class=\"hljs-attr\">nodeDistance</span>: <span class=\"hljs-number\">16</span>, <span class=\"hljs-attr\">rootx</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">rooty</span>: <span class=\"hljs-number\">150</span>},\n                    <span class=\"hljs-attr\">Layout</span>: DRadialLayout,\n                },\n                <span class=\"hljs-attr\">flow</span>: {\n                    <span class=\"hljs-attr\">props</span>: {<span class=\"hljs-attr\">intraCellSpacing</span>: <span class=\"hljs-number\">20</span>, <span class=\"hljs-attr\">interHierarchySpacing</span>: <span class=\"hljs-number\">30</span>, <span class=\"hljs-attr\">interRankCellSpacing</span>: <span class=\"hljs-number\">50</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'vertical'</span>, <span class=\"hljs-attr\">resizeParent</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">parentBorder</span>: <span class=\"hljs-number\">10</span>},\n                    <span class=\"hljs-attr\">Layout</span>: DFlowLayout,\n                },\n                <span class=\"hljs-attr\">circle</span>: {\n                    <span class=\"hljs-attr\">props</span>: {<span class=\"hljs-attr\">x0</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y0</span>: <span class=\"hljs-number\">0</span>}, \n                    <span class=\"hljs-attr\">Layout</span>: DCircleLayout,\n                },\n                <span class=\"hljs-attr\">organic</span>: {\n                    <span class=\"hljs-attr\">props</span>: {<span class=\"hljs-attr\">forceConstant</span>: <span class=\"hljs-number\">50</span>},\n                    <span class=\"hljs-attr\">Layout</span>: DOrganicLayout,\n                },\n            },\n        };\n    }\n}</code></pre>"
        },
        {
            "language": "vue",
            "content": "<pre><code class=\"hljs html\">请参考index.vdt</code></pre>"
        },
        {
            "language": "jsx",
            "content": "<pre><code class=\"hljs jsx\">请参考index.vdt</code></pre>"
        },
        {
            "language": "ts",
            "content": "<pre><code class=\"hljs ts\">请参考index.vdt</code></pre>"
        }
    ]
}