{
    "setting": {
        "title": "定义表格结构",
        "order": 1
    },
    "catalogs": [],
    "contents": "<p>定义表格结构有两种形式：</p>\n<ol>\n<li>通过<code>TableColumn</code>组件定义 </li>\n<li>通过<code>scheme</code>属性定义</li>\n</ol>\n<p><code>TableColumn</code>详细说明，见下文属性说明，<code>scheme</code>属性值的结构与之相对应</p>\n<blockquote>\n<p>对于简单的表格，默认会使用<code>key</code>去取<code>data</code>中的数据，例如本例中，<code>key</code>为<code>a</code>的列，默认会取<code>data</code>中对应<code>key</code>为<code>a</code>的数据进行展示，<code>key</code>支持路径取值，例如：<code>a.b.0</code>。当然我们也可以通过<code>template</code>属性指定复杂内容</p>\n</blockquote>\n<blockquote>\n<p>为了保证列顺序正确，<code>key</code>不要以数字开头</p>\n</blockquote>\n<blockquote>\n<p><code>@since v0.5.6</code> 也可以通过<code>template</code>block定义单元格内容</p>\n</blockquote>\n",
    "index": 67,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> {Table, TableColumn} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/table'</span>;\n\n<span class=\"hljs-keyword\">const</span> data = [{<span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">'虚拟DOM'</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">'获取到了item.b'</span>, <span class=\"hljs-attr\">c</span>: {<span class=\"hljs-attr\">c1</span>: <span class=\"hljs-string\">'item.c.c1'</span>}}];\n<span class=\"hljs-keyword\">const</span> scheme = {\n    <span class=\"hljs-attr\">a</span>: {\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'定义该列单元格内容'</span>,\n        <span class=\"hljs-attr\">template</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n           <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span>{{ item.a }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span>\n        }\n    },\n    <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">'key形式'</span>,\n    <span class=\"hljs-string\">'c.c1'</span>: <span class=\"hljs-string\">'key为一个路径字符串'</span>,\n    <span class=\"hljs-string\">'d.d1'</span>: <span class=\"hljs-string\">'没有这个key，则返回空'</span>,\n};\n\n&lt;div&gt;\n    &lt;Table scheme={{ scheme }} data={{ data }} /&gt;\n    &lt;Table data={{ data }}&gt;\n        &lt;TableColumn \n            title='定义该列单元格内容'\n            template={{ function(item) {\n                return &lt;a&gt;{{ item.a }}&lt;/a&gt;\n            } }} \n            key='a'\n        /&gt;\n        &lt;TableColumn title='key形式' key='b' /&gt;\n        &lt;TableColumn title='key为一个路径字符串' key='c.c1' /&gt;\n        &lt;TableColumn title='没有这个key，则返回空' key='d.d1' /&gt;\n    &lt;/Table&gt;\n&lt;/div&gt;</code></pre>"
        },
        {
            "language": "styl",
            "content": "<pre><code class=\"hljs styl\"><span class=\"hljs-selector-class\">.k-table</span>\n    <span class=\"hljs-attribute\">margin-bottom</span> <span class=\"hljs-number\">20px</span></code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./index.styl'</span>; \n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n}</code></pre>"
        },
        {
            "language": "jsx",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> {Table, TableColumn} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/table'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./index.styl'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    render() {\n        <span class=\"hljs-keyword\">const</span> data = [{<span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">'虚拟DOM'</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">'获取到了item.b'</span>, <span class=\"hljs-attr\">c</span>: {<span class=\"hljs-attr\">c1</span>: <span class=\"hljs-string\">'item.c.c1'</span>}}];\n        <span class=\"hljs-keyword\">const</span> scheme = {\n            <span class=\"hljs-attr\">a</span>: {\n                <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'定义该列单元格内容'</span>,\n                <span class=\"hljs-attr\">template</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n                   <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span>{item.a}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span>\n                }\n            },\n            <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">'key形式'</span>,\n            <span class=\"hljs-string\">'c.c1'</span>: <span class=\"hljs-string\">'key为一个路径字符串'</span>,\n            <span class=\"hljs-string\">'d.d1'</span>: <span class=\"hljs-string\">'没有这个key，则返回空'</span>,\n        };\n\n        <span class=\"hljs-keyword\">return</span> (\n            &lt;div&gt;\n                &lt;Table scheme={scheme} data={data} /&gt;\n                &lt;Table data={data}&gt;\n                    &lt;TableColumn \n                        title='定义该列单元格内容'\n                        template={(item) =&gt; {\n                            return &lt;a&gt;{item.a}&lt;/a&gt;\n                        }}\n                        key='a'\n                    /&gt;\n                    &lt;TableColumn title='key形式' key='b' /&gt;\n                    &lt;TableColumn title='key为一个路径字符串' key='c.c1' /&gt;\n                    &lt;TableColumn title='没有这个key，则返回空' key='d.d1' /&gt;\n                &lt;/Table&gt;\n            &lt;/div&gt;\n        )\n    }\n}</code></pre>"
        },
        {
            "language": "vue",
            "content": "<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Table</span> <span class=\"hljs-attr\">:scheme</span>=<span class=\"hljs-string\">\"scheme\"</span> <span class=\"hljs-attr\">:data</span>=<span class=\"hljs-string\">\"data\"</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Table</span> <span class=\"hljs-attr\">:data</span>=<span class=\"hljs-string\">\"data\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TableColumn</span> \n                <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">'定义该列单元格内容'</span>\n                <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">'a'</span>\n            &gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"item\"</span>&gt;</span>{{ item.a }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TableColumn</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TableColumn</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">'key形式'</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">'b'</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TableColumn</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">'key为一个路径字符串'</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">'c.c1'</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TableColumn</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">'没有这个key，则返回空'</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">'d.d1'</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Table</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> {Table, TableColumn} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-vue/components/table'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: {\n        Table, TableColumn\n    },\n    data() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">scheme</span>: {\n                <span class=\"hljs-attr\">a</span>: {\n                    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'定义该列单元格内容'</span>,\n                    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n                        <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span>{item.a}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span>\n                    }\n                },\n                <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">'key形式'</span>,\n                <span class=\"hljs-string\">'c.c1'</span>: <span class=\"hljs-string\">'key为一个路径字符串'</span>,\n                <span class=\"hljs-string\">'d.d1'</span>: <span class=\"hljs-string\">'没有这个key，则返回空'</span>, \n            },\n            <span class=\"hljs-attr\">data</span>: [{<span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">'虚拟DOM'</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">'获取到了item.b'</span>, <span class=\"hljs-attr\">c</span>: {<span class=\"hljs-attr\">c1</span>: <span class=\"hljs-string\">'item.c.c1'</span>}}]\n        }\n    }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"stylus\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./index.styl\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre>"
        },
        {
            "language": "ts",
            "content": "<pre><code class=\"hljs ts\">不建议Angular下使用这种方式</code></pre>"
        }
    ]
}