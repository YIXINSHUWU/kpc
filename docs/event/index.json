{
    "setting": {
        "title": "默认事件",
        "order": 3,
        "sidebar": "doc"
    },
    "catalogs": [],
    "contents": "<p>组件除了自定义事件外，还存在一类默认事件，文档中并没有提到，该事件是框架底层自动触发的。</p>\n<h1 id='header-%24change%3A*'><code>$change:*</code></h1><p>该事件会在组件内部属性变更时触发，此时组件视图并没有更新。组件会将当前组件实例、变更后的值以及变更之前的值传给组件回调函数</p>\n<h2 id='header-%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0'>事件回调函数</h2><p><code>function(instance, newValue, oldValue)</code></p>\n<ol>\n<li><code>instance</code> 触发相应事件的组件实例对象</li>\n<li><code>newValue</code> 变更后的值</li>\n<li><code>oldValue</code> 变更之前的值</li>\n</ol>\n<p>例如：我们如下这样可以监听<code>Select</code>值变化事件，值对应的属性名为<code>value</code></p>\n<ol>\n<li><p>Intact</p>\n<pre><code class=\"hljs vdt\"> &lt;<span class=\"hljs-keyword\">Select</span> ev-$change:<span class=\"hljs-keyword\">value</span>={{ <span class=\"hljs-keyword\">self</span>.onChange }}&gt;\n     &lt;<span class=\"hljs-keyword\">Option</span> <span class=\"hljs-keyword\">value</span>=<span class=\"hljs-string\">\"1\"</span>&gt;<span class=\"hljs-number\">1</span>&lt;/<span class=\"hljs-keyword\">Option</span>&gt;\n     &lt;<span class=\"hljs-keyword\">Option</span> <span class=\"hljs-keyword\">value</span>=<span class=\"hljs-string\">\"2\"</span>&gt;<span class=\"hljs-number\">2</span>&lt;/<span class=\"hljs-keyword\">Option</span>&gt;\n &lt;/<span class=\"hljs-keyword\">Select</span>&gt;\n</code></pre>\n</li>\n<li><p>Vue</p>\n<pre><code class=\"hljs vue\"> &lt;<span class=\"hljs-keyword\">Select</span> @$change:<span class=\"hljs-keyword\">value</span>=\"onChange\"&gt;\n     &lt;<span class=\"hljs-keyword\">Option</span> <span class=\"hljs-keyword\">value</span>=\"1\"&gt;<span class=\"hljs-number\">1</span>&lt;/<span class=\"hljs-keyword\">Option</span>&gt;\n     &lt;<span class=\"hljs-keyword\">Option</span> <span class=\"hljs-keyword\">value</span>=\"2\"&gt;<span class=\"hljs-number\">2</span>&lt;/<span class=\"hljs-keyword\">Option</span>&gt;\n &lt;/<span class=\"hljs-keyword\">Select</span>&gt;\n</code></pre>\n<blockquote>\n<p>vue支持<code>sync</code>修饰符，借用该默认事件，我们可以实现任意属性的<code>.sync</code>修饰进行双向绑定，所以我们甚至可以使用<code>.sync</code>实现<code>v-model</code>的功能</p>\n<pre><code class=\"hljs vue\"> &lt;<span class=\"hljs-keyword\">Select</span> <span class=\"hljs-keyword\">value</span>.sync=\"value\"&gt;\n     &lt;<span class=\"hljs-keyword\">Option</span> <span class=\"hljs-keyword\">value</span>=\"1\"&gt;<span class=\"hljs-number\">1</span>&lt;/<span class=\"hljs-keyword\">Option</span>&gt;\n     &lt;<span class=\"hljs-keyword\">Option</span> <span class=\"hljs-keyword\">value</span>=\"2\"&gt;<span class=\"hljs-number\">2</span>&lt;/<span class=\"hljs-keyword\">Option</span>&gt;\n &lt;/<span class=\"hljs-keyword\">Select</span>&gt;\n</code></pre>\n</blockquote>\n<p> 如果要实现回调函数传参，可以借助vue的<code>arguments</code>写法</p>\n<pre><code class=\"hljs vue\"> &lt;<span class=\"hljs-keyword\">Select</span> @$change:<span class=\"hljs-keyword\">value</span>=\"onChange('test', ...arguments)\"&gt;\n     &lt;<span class=\"hljs-keyword\">Option</span> <span class=\"hljs-keyword\">value</span>=\"1\"&gt;<span class=\"hljs-number\">1</span>&lt;/<span class=\"hljs-keyword\">Option</span>&gt;\n     &lt;<span class=\"hljs-keyword\">Option</span> <span class=\"hljs-keyword\">value</span>=\"2\"&gt;<span class=\"hljs-number\">2</span>&lt;/<span class=\"hljs-keyword\">Option</span>&gt;\n &lt;/<span class=\"hljs-keyword\">Select</span>&gt;\n</code></pre>\n</li>\n<li><p>React React支持使用<code>:</code>当做属性名，所以将<code>:</code>改为<code>-</code>即可</p>\n<pre><code class=\"hljs jsx\"> &lt;<span class=\"hljs-keyword\">Select</span> <span class=\"hljs-keyword\">on</span>$change-<span class=\"hljs-keyword\">value</span>={this.onChange.bind(this)}&gt;\n     &lt;<span class=\"hljs-keyword\">Option</span> <span class=\"hljs-keyword\">value</span>=\"1\"&gt;<span class=\"hljs-number\">1</span>&lt;/<span class=\"hljs-keyword\">Option</span>&gt;\n     &lt;<span class=\"hljs-keyword\">Option</span> <span class=\"hljs-keyword\">value</span>=\"2\"&gt;<span class=\"hljs-number\">2</span>&lt;/<span class=\"hljs-keyword\">Option</span>&gt;\n &lt;/<span class=\"hljs-keyword\">Select</span>&gt;\n</code></pre>\n</li>\n</ol>\n<h1 id='header-%24changed%3A*'><code>$changed:*</code></h1><p>与<code>$change:*</code>事件类似，组件在属性变更时还会触发<code>$changed:*</code>事件，唯一的区别是，该事件发生在<code>$change:*</code>事件之后，它会在视图更新后触发。</p>\n",
    "index": 184
}