{
    "setting": {
        "title": "异步关闭",
        "order": 6
    },
    "catalogs": [],
    "contents": "<p><code>Dialog</code>默认点击确定按钮会立即关闭弹窗并触发<code>ok</code>事件，我们可以给<code>ok</code>属性（并非<code>ok</code>事件）指定一个函数来去掉默认函数行为，此时你可以自己控制弹窗的关闭情况。<code>cancel</code>属性同理。</p>\n",
    "index": 280,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> Dialog <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/dialog'</span>;\n<span class=\"hljs-keyword\">import</span> {Form, FormItem} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/form'</span>;\n<span class=\"hljs-keyword\">import</span> {Input} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/input'</span>;\n<span class=\"hljs-keyword\">import</span> {Button} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/button'</span>;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span>\n        <span class=\"hljs-attr\">ev-click</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">self.set.bind</span>(<span class=\"hljs-attr\">self</span>, '<span class=\"hljs-attr\">show</span>', <span class=\"hljs-attr\">true</span>) }}\n    &gt;</span>Close Dialog Asynchronously<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Dialog</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"show\"</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"Customized ok callback\"</span>\n        <span class=\"hljs-attr\">ok</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">self.ok</span> }}\n    &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"form\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormItem</span> <span class=\"hljs-attr\">model</span>=<span class=\"hljs-string\">\"code\"</span> <span class=\"hljs-attr\">rules</span>=<span class=\"hljs-string\">{{</span> {<span class=\"hljs-attr\">required:</span> <span class=\"hljs-attr\">true</span>, <span class=\"hljs-attr\">digits:</span> <span class=\"hljs-attr\">true</span>} }} <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"Code:\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"please enter digits\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"code\"</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormItem</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Form</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Dialog</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n\n<span class=\"hljs-keyword\">import</span> Message <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/message'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    <span class=\"hljs-keyword\">async</span> ok(dialog) {\n        <span class=\"hljs-comment\">// validate the form firstly</span>\n        <span class=\"hljs-keyword\">const</span> valid = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.refs.form.validate();\n        <span class=\"hljs-keyword\">if</span> (valid) {\n            <span class=\"hljs-comment\">// make the ok button show loading</span>\n            dialog.showLoading(); \n            <span class=\"hljs-comment\">// mock api</span>\n            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n                setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Math</span>.random() &gt; <span class=\"hljs-number\">0.5</span>) {\n                        resolve();\n                    } <span class=\"hljs-keyword\">else</span> {\n                        reject();\n                    }\n                }, <span class=\"hljs-number\">2000</span>);\n            }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                <span class=\"hljs-comment\">// if success, close dialog </span>\n                dialog.hideLoading();\n                dialog.close();\n            }, () =&gt; {\n                <span class=\"hljs-comment\">// if error, don't close dialog</span>\n                dialog.hideLoading();\n                Message.error(<span class=\"hljs-string\">'error occured'</span>);\n            });\n        }\n    }\n}</code></pre>"
        },
        {
            "language": "vue",
            "content": "<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span>\n            @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"set('show', true)\"</span>\n        &gt;</span>Close Dialog Asynchronously<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Dialog</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"show\"</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">\"Customized ok callback\"</span>\n            <span class=\"hljs-attr\">:ok</span>=<span class=\"hljs-string\">\"ok\"</span>\n        &gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"form\"</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormItem</span> <span class=\"hljs-attr\">model</span>=<span class=\"hljs-string\">\"code\"</span> <span class=\"hljs-attr\">:rules</span>=<span class=\"hljs-string\">\"{required: true, digits: true}\"</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"Code:\"</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"please enter digits\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"code\"</span> /&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormItem</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Form</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Dialog</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> Dialog <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-vue/components/dialog'</span>;\n<span class=\"hljs-keyword\">import</span> {Form, FormItem} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-vue/components/form'</span>;\n<span class=\"hljs-keyword\">import</span> {Input} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-vue/components/input'</span>;\n<span class=\"hljs-keyword\">import</span> {Button} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-vue/components/button'</span>;\n\n<span class=\"hljs-keyword\">import</span> Message <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-vue/components/message'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: {\n        Dialog, Form, FormItem, Input, Button\n    },\n    data() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-string\">\"show\"</span>: <span class=\"hljs-literal\">null</span>,\n            <span class=\"hljs-string\">\"code\"</span>: <span class=\"hljs-literal\">null</span>\n        }\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n        <span class=\"hljs-keyword\">set</span>(key, value) { <span class=\"hljs-keyword\">this</span>[key] = value },\n        <span class=\"hljs-keyword\">async</span> ok(dialog) {\n            <span class=\"hljs-comment\">// validate the form firstly</span>\n            <span class=\"hljs-keyword\">const</span> valid = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.$refs.form.validate();\n            <span class=\"hljs-keyword\">if</span> (valid) {\n                <span class=\"hljs-comment\">// make the ok button show loading</span>\n                dialog.showLoading(); \n                <span class=\"hljs-comment\">// mock api</span>\n                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n                    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Math</span>.random() &gt; <span class=\"hljs-number\">0.5</span>) {\n                            resolve();\n                        } <span class=\"hljs-keyword\">else</span> {\n                            reject();\n                        }\n                    }, <span class=\"hljs-number\">2000</span>);\n                }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                    <span class=\"hljs-comment\">// if success, close dialog </span>\n                    dialog.hideLoading();\n                    dialog.close();\n                }, () =&gt; {\n                    <span class=\"hljs-comment\">// if error, don't close dialog</span>\n                    dialog.hideLoading();\n                    Message.error(<span class=\"hljs-string\">'error occured'</span>);\n                });\n            }\n        },\n    },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>"
        },
        {
            "language": "jsx",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> Dialog <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-react/components/dialog'</span>;\n<span class=\"hljs-keyword\">import</span> {Form, FormItem} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-react/components/form'</span>;\n<span class=\"hljs-keyword\">import</span> {Input} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-react/components/input'</span>;\n<span class=\"hljs-keyword\">import</span> {Button} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-react/components/button'</span>;\n\n<span class=\"hljs-keyword\">import</span> Message <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-react/components/message'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>(props) {\n        <span class=\"hljs-keyword\">super</span>(props);\n        <span class=\"hljs-keyword\">this</span>.state = {};\n        <span class=\"hljs-keyword\">this</span>.set = <span class=\"hljs-keyword\">this</span>.set.bind(<span class=\"hljs-keyword\">this</span>);\n        <span class=\"hljs-keyword\">this</span>.ok = <span class=\"hljs-keyword\">this</span>.ok.bind(<span class=\"hljs-keyword\">this</span>);\n    }\n\n    <span class=\"hljs-keyword\">set</span>(key, value) { <span class=\"hljs-keyword\">this</span>.setState({[key]: value}); }\n    \n    <span class=\"hljs-keyword\">async</span> ok(dialog) {\n        <span class=\"hljs-comment\">// validate the form firstly</span>\n        <span class=\"hljs-keyword\">const</span> valid = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.form.validate();\n        <span class=\"hljs-keyword\">if</span> (valid) {\n            <span class=\"hljs-comment\">// make the ok button show loading</span>\n            dialog.showLoading(); \n            <span class=\"hljs-comment\">// mock api</span>\n            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n                setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Math</span>.random() &gt; <span class=\"hljs-number\">0.5</span>) {\n                        resolve();\n                    } <span class=\"hljs-keyword\">else</span> {\n                        reject();\n                    }\n                }, <span class=\"hljs-number\">2000</span>);\n            }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                <span class=\"hljs-comment\">// if success, close dialog </span>\n                dialog.hideLoading();\n                dialog.close();\n            }, () =&gt; {\n                <span class=\"hljs-comment\">// if error, don't close dialog</span>\n                dialog.hideLoading();\n                Message.error(<span class=\"hljs-string\">'error occured'</span>);\n            });\n        }\n    }\n    \n    render() {\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"primary\"</span>\n                    <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.set.bind(this,</span> '<span class=\"hljs-attr\">show</span>', <span class=\"hljs-attr\">true</span>)}\n                &gt;</span>Close Dialog Asynchronously<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Dialog</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state.show}</span> <span class=\"hljs-attr\">on</span>$<span class=\"hljs-attr\">change-value</span>=<span class=\"hljs-string\">{(c,</span> <span class=\"hljs-attr\">show</span>) =&gt;</span> this.setState({show})} title=\"Customized ok callback\"\n                    ok={this.ok}\n                &gt;\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{i</span> =&gt;</span> this.form = i}&gt;\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormItem</span> <span class=\"hljs-attr\">model</span>=<span class=\"hljs-string\">\"code\"</span> <span class=\"hljs-attr\">rules</span>=<span class=\"hljs-string\">{{required:</span> <span class=\"hljs-attr\">true</span>, <span class=\"hljs-attr\">digits:</span> <span class=\"hljs-attr\">true</span>}} <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">\"Code:\"</span>&gt;</span>\n                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"please enter digits\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state.code}</span> <span class=\"hljs-attr\">on</span>$<span class=\"hljs-attr\">change-value</span>=<span class=\"hljs-string\">{(c,</span> <span class=\"hljs-attr\">code</span>) =&gt;</span> this.setState({code})} /&gt;\n                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormItem</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Form</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Dialog</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        )\n    }\n}</span></code></pre>"
        },
        {
            "language": "ts",
            "content": "<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> {Component, ViewChild} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-keyword\">import</span> Message <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-angular/components/message'</span>;\n\n\n<span class=\"hljs-meta\">@Component</span>({\n    selector: <span class=\"hljs-string\">'app-demo'</span>,\n    template: <span class=\"hljs-string\">`\n        &lt;div&gt;\n            &lt;k-button type=\"primary\"\n                (click)=\"set('show', true)\"\n            &gt;Close Dialog Asynchronously&lt;/k-button&gt;\n            &lt;k-dialog [(value)]=\"show\" title=\"Customized ok callback\"\n                [ok]=\"ok\"\n            &gt;\n                &lt;k-form #form&gt;\n                    &lt;k-form-item model=\"code\" [rules]=\"{required: true, digits: true}\" label=\"Code:\"&gt;\n                        &lt;k-input placeholder=\"please enter digits\" [(value)]=\"code\"&gt;&lt;/k-input&gt;\n                    &lt;/k-form-item&gt;\n                &lt;/k-form&gt;\n            &lt;/k-dialog&gt;\n        &lt;/div&gt;\n    `</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppDemoComponent {\n    <span class=\"hljs-meta\">@ViewChild</span>(<span class=\"hljs-string\">'form'</span>, {<span class=\"hljs-keyword\">static</span>: <span class=\"hljs-literal\">false</span>}) form;\n\n    <span class=\"hljs-keyword\">private</span> show;\n    <span class=\"hljs-keyword\">private</span> code;\n\n    <span class=\"hljs-comment\">// helper function</span>\n    <span class=\"hljs-keyword\">set</span>(key, value) { <span class=\"hljs-keyword\">this</span>[key] = value; }\n    \n    ok = <span class=\"hljs-keyword\">async</span> (dialog) =&gt; {\n        <span class=\"hljs-comment\">// validate the form firstly</span>\n        <span class=\"hljs-keyword\">const</span> valid = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.form.validate();\n        <span class=\"hljs-keyword\">if</span> (valid) {\n            <span class=\"hljs-comment\">// make the ok button show loading</span>\n            dialog.showLoading(); \n            <span class=\"hljs-comment\">// mock api</span>\n            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n                setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Math</span>.random() &gt; <span class=\"hljs-number\">0.5</span>) {\n                        resolve();\n                    } <span class=\"hljs-keyword\">else</span> {\n                        reject();\n                    }\n                }, <span class=\"hljs-number\">2000</span>);\n            }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                <span class=\"hljs-comment\">// if success, close dialog </span>\n                dialog.hideLoading();\n                dialog.close();\n            }, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                <span class=\"hljs-comment\">// if error, don't close dialog</span>\n                dialog.hideLoading();\n                Message.error(<span class=\"hljs-string\">'error occured'</span>);\n            });\n        }\n    }\n}</code></pre>"
        }
    ]
}