{
    "setting": {
        "title": "输入过程中禁止更新",
        "order": 7
    },
    "catalogs": [],
    "contents": "<p>默认情况下<code>value</code>变化，就会更新视图的<code>value</code>值，但这会打断用户的输入，当添加<code>frozenOnInput</code>属性时，组件的<code>value</code>在输入的过程中被冻结，输入完成后，组件才会更新最新的<code>value</code>到视图。</p>\n<p>本例中，上面的<code>Input</code>你接着输入<code>d</code>，<code>value</code>会立即更新成<code>#dddddd</code>，但是下面的<code>Input</code>不会</p>\n",
    "index": 286,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> {Input} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/input'</span>;\n\n&lt;div&gt;\n    &lt;Input value={{ self.get('value') }} ev-input={{ self._onInput }} /&gt;\n    &lt;br /&gt;\n    &lt;Input frozenOnInput value={{ self.get('value') }} ev-input={{ self._onInput }} /&gt;\n&lt;/div&gt;</code></pre>"
        },
        {
            "language": "styl",
            "content": "<pre><code class=\"hljs styl\"><span class=\"hljs-selector-class\">.k-input</span>\n    <span class=\"hljs-attribute\">margin</span> <span class=\"hljs-number\">5px</span></code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./index.styl'</span>; \n\n<span class=\"hljs-keyword\">import</span> tinycolor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'tinycolor2'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    defaults() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'#ddd'</span>\n        };\n    }\n\n    _onInput(e) {\n        <span class=\"hljs-keyword\">const</span> value = e.target.value.trim();\n        <span class=\"hljs-keyword\">const</span> color = tinycolor(value);\n        <span class=\"hljs-keyword\">if</span> (color.isValid()) {\n            <span class=\"hljs-keyword\">const</span> newValue = color.toHexString();\n            <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'value'</span>, newValue);\n        }\n    }\n}</code></pre>"
        },
        {
            "language": "vue",
            "content": "<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">\"value\"</span> @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">\"_onInput\"</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> <span class=\"hljs-attr\">frozenOnInput</span> <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">\"value\"</span> @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">\"_onInput\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> {Input} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-vue/components/input'</span>;\n\n<span class=\"hljs-keyword\">import</span> tinycolor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'tinycolor2'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: {\n        Input\n    },\n    data() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"#ddd\"</span>\n        }\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n        _onInput(e) {\n            <span class=\"hljs-keyword\">const</span> value = e.target.value.trim();\n            <span class=\"hljs-keyword\">const</span> color = tinycolor(value);\n            <span class=\"hljs-keyword\">if</span> (color.isValid()) {\n                <span class=\"hljs-keyword\">const</span> newValue = color.toHexString();\n                <span class=\"hljs-keyword\">this</span>.value = newValue;\n            }\n        },\n    },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"stylus\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./index.styl\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre>"
        },
        {
            "language": "jsx",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> {Input} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-react/components/input'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./index.styl'</span>;\n<span class=\"hljs-keyword\">import</span> tinycolor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'tinycolor2'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>(props) {\n        <span class=\"hljs-keyword\">super</span>(props);\n        <span class=\"hljs-keyword\">this</span>.state = {\n            <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"#ddd\"</span>\n        };\n        <span class=\"hljs-keyword\">this</span>._onInput = <span class=\"hljs-keyword\">this</span>._onInput.bind(<span class=\"hljs-keyword\">this</span>);\n    }\n\n    _onInput(e) {\n        <span class=\"hljs-keyword\">const</span> value = e.target.value.trim();\n        <span class=\"hljs-keyword\">const</span> color = tinycolor(value);\n        <span class=\"hljs-keyword\">if</span> (color.isValid()) {\n            <span class=\"hljs-keyword\">const</span> newValue = color.toHexString();\n            <span class=\"hljs-keyword\">this</span>.setState({<span class=\"hljs-attr\">value</span>: newValue});\n        }\n    }\n    \n    render() {\n        <span class=\"hljs-keyword\">return</span> (\n            &lt;div&gt;\n                &lt;Input value={this.state.value} onInput={this._onInput} /&gt;\n                &lt;br /&gt;\n                &lt;Input frozenOnInput value={this.state.value} onInput={this._onInput} /&gt;\n            &lt;/div&gt;\n        )\n    }\n}</code></pre>"
        },
        {
            "language": "ts",
            "content": "<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> {Component} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-keyword\">import</span> tinycolor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'tinycolor2'</span>;\n\n\n<span class=\"hljs-meta\">@Component</span>({\n    selector: <span class=\"hljs-string\">'app-demo'</span>,\n    template: <span class=\"hljs-string\">`\n        &lt;div&gt;\n            &lt;k-input [value]=\"value\" (input)=\"_onInput($event)\"&gt;&lt;/k-input&gt;\n            &lt;br /&gt;\n            &lt;k-input [frozenOnInput]=\"true\" [value]=\"value\" (input)=\"_onInput($event)\"&gt;&lt;/k-input&gt;\n        &lt;/div&gt;\n    `</span>,\n    styleUrls: [<span class=\"hljs-string\">'./index.styl'</span>],\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppDemoComponent {\n    <span class=\"hljs-keyword\">private</span> value = <span class=\"hljs-string\">\"#ddd\"</span>;\n\n    _onInput([e]) {\n        <span class=\"hljs-keyword\">const</span> value = e.target.value.trim();\n        <span class=\"hljs-keyword\">const</span> color = tinycolor(value);\n        <span class=\"hljs-keyword\">if</span> (color.isValid()) {\n            <span class=\"hljs-keyword\">const</span> newValue = color.toHexString();\n            <span class=\"hljs-keyword\">this</span>.value = newValue;\n        }\n    }\n}</code></pre>"
        }
    ]
}