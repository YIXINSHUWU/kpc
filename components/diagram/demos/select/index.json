{
    "setting": {
        "title": "图形选择联动",
        "order": 4
    },
    "catalogs": [],
    "contents": "<p>当图形支持选择时<code>selectable</code>时，用户选择不同的图形<code>Diagram</code>会触发<code>selectionChanged</code>事件，组件会将选择的图形以数组的形式传给事件回调函数，如果图形添加了<code>data</code>属性，则我们可以通过图形对象获取到该数据<code>shape.data</code></p>\n",
    "index": 223,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> {Diagram, DTreeLayout, DCircle, DLine, DText} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/diagram'</span>;\n\n<span class=\"hljs-keyword\">const</span> loop = <span class=\"hljs-function\">(<span class=\"hljs-params\">children, parent, disabled</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> ret = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; children.length; i++) {\n        <span class=\"hljs-keyword\">const</span> data = children[i];\n\n        <span class=\"hljs-comment\">// if parent is disabled, disable all children</span>\n        <span class=\"hljs-keyword\">if</span> (!disabled &amp;&amp; data.disabled) disabled = <span class=\"hljs-literal\">true</span>; \n\n        ret.push(\n            &lt;DCircle key={{ data.key }} \n                label={{ data.key }} \n                selectable={{ !disabled }}\n                data={{ data }}\n            /&gt;\n        );\n\n        // add line if it has parent\n        if (parent) {\n            ret.push(&lt;DLine from={{ parent.key }} to={{ data.key }} type=\"rounded\" /&gt;);\n        }\n        if (data.children) {\n            ret.push(...loop(data.children, data, disabled));\n        }\n    }\n    return ret;\n}\n\n&lt;Diagram ev-selectionChanged={{ self._onSelect }}&gt;\n    &lt;DTreeLayout type=\"vertical\"&gt;\n        {{ loop([self.get('data')]) }}\n    &lt;/DTreeLayout&gt;\n&lt;/Diagram&gt;</code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n\n<span class=\"hljs-keyword\">import</span> Message <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/message'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    defaults() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">data</span>: {\n                <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'Database'</span>,\n                <span class=\"hljs-attr\">children</span>: [\n                    {\n                        <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'Table1'</span>,\n                        <span class=\"hljs-attr\">children</span>: [\n                            {\n                                <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'Column1-1'</span>,\n                            },\n                            {\n                                <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'Column1-2'</span>,\n                            }\n                        ]\n                     },\n                     {\n                        <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'Table2'</span>,\n                        <span class=\"hljs-attr\">disabled</span>: <span class=\"hljs-literal\">true</span>,\n                        <span class=\"hljs-attr\">children</span>: [\n                            {\n                                <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'Column2-1'</span>,\n                            },\n                            {\n                                <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'Column2-2'</span>,\n                            }\n                        ]\n                     },\n                ] \n            }\n        }\n    }\n\n    _onSelect(shapes) {\n        <span class=\"hljs-keyword\">if</span> (!shapes.length) {\n            Message.info(<span class=\"hljs-string\">'You selected nothing.'</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">const</span> data = shapes[<span class=\"hljs-number\">0</span>].data;\n            Message.info(<span class=\"hljs-string\">`You selected <span class=\"hljs-subst\">${data.key}</span>.`</span>);\n        }\n    }\n}</code></pre>"
        },
        {
            "language": "vue",
            "content": "<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Diagram</span> @<span class=\"hljs-attr\">selectionChanged</span>=<span class=\"hljs-string\">\"_onSelect\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DTreeLayout</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"vertical\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DCircle</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"node in nodes\"</span>\n                <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"node.key\"</span>\n                <span class=\"hljs-attr\">:label</span>=<span class=\"hljs-string\">\"node.label\"</span>\n                <span class=\"hljs-attr\">:selectable</span>=<span class=\"hljs-string\">\"node.selectable\"</span>\n                <span class=\"hljs-attr\">:data</span>=<span class=\"hljs-string\">\"node.data\"</span>\n            /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DLine</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"line in lines\"</span>\n                <span class=\"hljs-attr\">:from</span>=<span class=\"hljs-string\">\"line.from\"</span>\n                <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"line.to\"</span>\n                <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"rounded\"</span>\n            /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DTreeLayout</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Diagram</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> {Diagram, DTreeLayout, DCircle, DLine, DText} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/diagram'</span>;\n<span class=\"hljs-keyword\">import</span> Message <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/message'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: {\n        Diagram, DTreeLayout, DCircle, DLine, DText\n    },\n    data() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-string\">\"data\"</span>: {\n                <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Database\"</span>,\n                <span class=\"hljs-string\">\"children\"</span>: [\n                    {\n                        <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Table1\"</span>,\n                        <span class=\"hljs-string\">\"children\"</span>: [\n                            {\n                                <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Column1-1\"</span>\n                            },\n                            {\n                                <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Column1-2\"</span>\n                            }\n                        ]\n                    },\n                    {\n                        <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Table2\"</span>,\n                        <span class=\"hljs-string\">\"disabled\"</span>: <span class=\"hljs-literal\">true</span>,\n                        <span class=\"hljs-string\">\"children\"</span>: [\n                            {\n                                <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Column2-1\"</span>\n                            },\n                            {\n                                <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Column2-2\"</span>\n                            }\n                        ]\n                    }\n                ]\n            },\n            <span class=\"hljs-attr\">nodes</span>: [],\n            <span class=\"hljs-attr\">lines</span>: [],\n        }\n    },\n\n    <span class=\"hljs-attr\">watch</span>: {\n        <span class=\"hljs-attr\">data</span>: {\n            <span class=\"hljs-attr\">immediate</span>: <span class=\"hljs-literal\">true</span>,\n            handler() {\n                <span class=\"hljs-keyword\">const</span> nodes = [];\n                <span class=\"hljs-keyword\">const</span> lines = [];\n                <span class=\"hljs-keyword\">const</span> loop = <span class=\"hljs-function\">(<span class=\"hljs-params\">children, parent, disabled</span>) =&gt;</span> {\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; children.length; i++) {\n                        <span class=\"hljs-keyword\">const</span> data = children[i];\n\n                        <span class=\"hljs-comment\">// if parent is disabled, disable all children</span>\n                        <span class=\"hljs-keyword\">if</span> (!disabled &amp;&amp; data.disabled) disabled = <span class=\"hljs-literal\">true</span>; \n\n                        nodes.push({\n                            <span class=\"hljs-attr\">key</span>: data.key, \n                            <span class=\"hljs-attr\">label</span>: data.key,\n                            <span class=\"hljs-attr\">selectable</span>: !disabled,\n                            <span class=\"hljs-attr\">data</span>: data\n                        });\n\n                        <span class=\"hljs-comment\">// add line if it has parent</span>\n                        <span class=\"hljs-keyword\">if</span> (parent) {\n                            lines.push({<span class=\"hljs-attr\">from</span>: parent.key, <span class=\"hljs-attr\">to</span>: data.key});\n                        }\n                        <span class=\"hljs-keyword\">if</span> (data.children) {\n                            loop(data.children, data, disabled);\n                        }\n                    }\n                };\n                loop([<span class=\"hljs-keyword\">this</span>.data]);\n\n                <span class=\"hljs-keyword\">this</span>.nodes = nodes;\n                <span class=\"hljs-keyword\">this</span>.lines = lines;\n            }\n        }\n    },\n\n    <span class=\"hljs-attr\">methods</span>: {\n        _onSelect(shapes) {\n            <span class=\"hljs-keyword\">if</span> (!shapes.length) {\n                Message.info(<span class=\"hljs-string\">'You selected nothing.'</span>);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">const</span> data = shapes[<span class=\"hljs-number\">0</span>].data;\n                Message.info(<span class=\"hljs-string\">`You selected <span class=\"hljs-subst\">${data.key}</span>.`</span>);\n            }\n        },\n    },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>"
        },
        {
            "language": "ts",
            "content": "<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> {Component} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n<span class=\"hljs-keyword\">import</span> Message <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-angular/components/message'</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n    selector: <span class=\"hljs-string\">'app-demo'</span>,\n    template: <span class=\"hljs-string\">`\n        &lt;k-diagram (selectionChanged)=\"_onSelect($event)\"&gt;\n            &lt;k-d-tree-layout type=\"vertical\"&gt;\n                &lt;k-d-circle *ngFor=\"let node of nodes\"\n                    [key]=\"node.key\"\n                    [label]=\"node.label\"\n                    [selectable]=\"node.selectable\"\n                    [data]=\"node.data\"\n                &gt;&lt;/k-d-circle&gt;\n                &lt;k-d-line *ngFor=\"let line of lines\"\n                    [from]=\"line.from\"\n                    [to]=\"line.to\"\n                    type=\"rounded\"\n                &gt;&lt;/k-d-line&gt;\n            &lt;/k-d-tree-layout&gt;\n        &lt;/k-diagram&gt;\n    `</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppDemoComponent {\n    <span class=\"hljs-keyword\">private</span> data = {\n        <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Database\"</span>,\n        <span class=\"hljs-string\">\"children\"</span>: [\n            {\n                <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Table1\"</span>,\n                <span class=\"hljs-string\">\"children\"</span>: [\n                    {\n                        <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Column1-1\"</span>\n                    },\n                    {\n                        <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Column1-2\"</span>\n                    }\n                ]\n            },\n            {\n                <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Table2\"</span>,\n                <span class=\"hljs-string\">\"disabled\"</span>: <span class=\"hljs-literal\">true</span>,\n                <span class=\"hljs-string\">\"children\"</span>: [\n                    {\n                        <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Column2-1\"</span>\n                    },\n                    {\n                        <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Column2-2\"</span>\n                    }\n                ]\n            }\n        ]\n    };\n    <span class=\"hljs-keyword\">private</span> nodes = [];\n    <span class=\"hljs-keyword\">private</span> lines = [];\n\n    _onSelect([shapes]) {\n        <span class=\"hljs-keyword\">if</span> (!shapes.length) {\n            Message.info(<span class=\"hljs-string\">'You selected nothing.'</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">const</span> data = shapes[<span class=\"hljs-number\">0</span>].data;\n            Message.info(<span class=\"hljs-string\">`You selected <span class=\"hljs-subst\">${data.key}</span>.`</span>);\n        }\n    }\n\n    ngOnInit() {\n        <span class=\"hljs-keyword\">const</span> nodes = [];\n        <span class=\"hljs-keyword\">const</span> lines = [];\n        <span class=\"hljs-keyword\">const</span> loop = <span class=\"hljs-function\">(<span class=\"hljs-params\">children, parent = <span class=\"hljs-literal\">null</span>, disabled = <span class=\"hljs-literal\">false</span></span>) =&gt;</span> {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; children.length; i++) {\n                <span class=\"hljs-keyword\">const</span> data = children[i];\n\n                <span class=\"hljs-comment\">// if parent is disabled, disable all children</span>\n                <span class=\"hljs-keyword\">if</span> (!disabled &amp;&amp; data.disabled) disabled = <span class=\"hljs-literal\">true</span>; \n\n                nodes.push({\n                    key: data.key, \n                    label: data.key,\n                    selectable: !disabled,\n                    data: data\n                });\n\n                <span class=\"hljs-comment\">// add line if it has parent</span>\n                <span class=\"hljs-keyword\">if</span> (parent) {\n                    lines.push({<span class=\"hljs-keyword\">from</span>: parent.key, to: data.key});\n                }\n                <span class=\"hljs-keyword\">if</span> (data.children) {\n                    loop(data.children, data, disabled);\n                }\n            }\n        };\n        loop([<span class=\"hljs-keyword\">this</span>.data]);\n\n        <span class=\"hljs-keyword\">this</span>.nodes = nodes;\n        <span class=\"hljs-keyword\">this</span>.lines = lines;\n    }\n}</code></pre>"
        },
        {
            "language": "jsx",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> {Diagram, DTreeLayout, DCircle, DLine, DText} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-react/components/diagram'</span>;\n\n<span class=\"hljs-keyword\">import</span> Message <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-react/components/message'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>(props) {\n        <span class=\"hljs-keyword\">super</span>(props);\n        <span class=\"hljs-keyword\">this</span>.state = {\n            <span class=\"hljs-string\">\"data\"</span>: {\n                <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Database\"</span>,\n                <span class=\"hljs-string\">\"children\"</span>: [\n                    {\n                        <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Table1\"</span>,\n                        <span class=\"hljs-string\">\"children\"</span>: [\n                            {\n                                <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Column1-1\"</span>\n                            },\n                            {\n                                <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Column1-2\"</span>\n                            }\n                        ]\n                    },\n                    {\n                        <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Table2\"</span>,\n                        <span class=\"hljs-string\">\"disabled\"</span>: <span class=\"hljs-literal\">true</span>,\n                        <span class=\"hljs-string\">\"children\"</span>: [\n                            {\n                                <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Column2-1\"</span>\n                            },\n                            {\n                                <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"Column2-2\"</span>\n                            }\n                        ]\n                    }\n                ]\n            }\n        };\n        <span class=\"hljs-keyword\">this</span>._onSelect = <span class=\"hljs-keyword\">this</span>._onSelect.bind(<span class=\"hljs-keyword\">this</span>);\n    }\n\n    _onSelect(shapes) {\n        <span class=\"hljs-keyword\">if</span> (!shapes.length) {\n            Message.info(<span class=\"hljs-string\">'You selected nothing.'</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">const</span> data = shapes[<span class=\"hljs-number\">0</span>].data;\n            Message.info(<span class=\"hljs-string\">`You selected <span class=\"hljs-subst\">${data.key}</span>.`</span>);\n        }\n    }\n    \n    render() {\n        <span class=\"hljs-keyword\">const</span> loop = <span class=\"hljs-function\">(<span class=\"hljs-params\">children, parent, disabled</span>) =&gt;</span> {\n            <span class=\"hljs-keyword\">const</span> ret = [];\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; children.length; i++) {\n                <span class=\"hljs-keyword\">const</span> data = children[i];\n        \n                <span class=\"hljs-comment\">// if parent is disabled, disable all children</span>\n                <span class=\"hljs-keyword\">if</span> (!disabled &amp;&amp; data.disabled) disabled = <span class=\"hljs-literal\">true</span>; \n        \n                ret.push(\n                    &lt;DCircle key={data.key} \n                        label={data.key} \n                        selectable={!disabled}\n                        data={data}\n                    /&gt;\n                );\n        \n                // add line if it has parent\n                if (parent) {\n                    ret.push(&lt;DLine from={parent.key} to={data.key} type=\"rounded\" /&gt;);\n                }\n                if (data.children) {\n                    ret.push(...loop(data.children, data, disabled));\n                }\n            }\n            return ret;\n        }\n    \n        return (\n            &lt;Diagram onSelectionChanged={this._onSelect}&gt;\n                &lt;DTreeLayout type=\"vertical\"&gt;\n                    {loop([this.state.data])}\n                &lt;/DTreeLayout&gt;\n            &lt;/Diagram&gt;\n        )\n    }\n}</code></pre>"
        }
    ]
}