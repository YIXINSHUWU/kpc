{
    "setting": {
        "title": "定制主题",
        "order": 1.3,
        "sidebar": "doc"
    },
    "catalogs": [],
    "contents": "<p>在快速开始章节我们提到过“多文件半构建版”可以支持主题定制。因为这个版本样式文件使用了源码<code>stylus</code>，所以我们可以引入主题文件在构建时生成自定义主题的css样式。</p>\n<blockquote>\n<p>你可以使用<a href=\"https://kpc-theme.ksyun.com/\">在线主题定制工具</a>来制作主题</p>\n</blockquote>\n<p>得益于<code>stylus-loader</code>的<code>import</code>配置，我们可以指定一个主题文件，它会在编译每一个stylus文件时引入它。</p>\n<h1 id='header-%E9%85%8D%E7%BD%AEwebpack.config.js'>配置<code>webpack.config.js</code></h1><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n<span class=\"hljs-comment\">// 其他配置参见快速开始章节，这里略去</span>\n...\n{\n    <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">'stylus-loader'</span>,\n    <span class=\"hljs-attr\">options</span>: {\n        <span class=\"hljs-string\">'include css'</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-string\">'resolve url'</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">// 引入自定义主题文件mytheme/index.styl</span>\n        <span class=\"hljs-keyword\">import</span>: path.resolve(__dirname, <span class=\"hljs-string\">'styles/mytheme/index.styl'</span>)\n    }\n}\n</code></pre>\n<blockquote>\n<p>kpc内置了一个<code>ksyun</code>的主题，我们只需要将<code>import</code>指向它即可<code>import: &#39;~kpc/styles/themes/ksyun/index.styl&#39;</code></p>\n</blockquote>\n<h1 id='header-%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98'>定义主题</h1><h2 id='header-%E4%BF%AE%E6%94%B9%E5%8F%98%E9%87%8F'>修改变量</h2><p>kpc几乎将所有的可能变更的属性都提取成了变量，组件对应的变量命名规则为：使用小写字母<code>${组件名}-{类型}-{属性名}</code>的方式命名。例如：<code>$btn-primary-color := #fff</code> <code>$dialog-width := unit(670 / 14, rem)</code>等。</p>\n<p>通过修改<code>import</code>进来的主题文件中的变量，如上面<code>import</code>的文件<code>styles/themes/index.styl</code>，就可以自定义自己的主题。</p>\n<p>以上面提到的<code>styles/mytheme/index.styl</code>文件为例:</p>\n<pre><code class=\"hljs styl\"><span class=\"hljs-comment\">// 修改主色调</span>\n<span class=\"hljs-variable\">$primary</span>-<span class=\"hljs-attribute\">color</span> := <span class=\"hljs-number\">#289af4</span> \n\n<span class=\"hljs-comment\">/**\n * btn\n */</span>\n<span class=\"hljs-comment\">// 修改button组件的padding值</span>\n<span class=\"hljs-variable\">$btn</span>-<span class=\"hljs-attribute\">padding</span> := <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">30px</span>\n</code></pre>\n<blockquote>\n<p>赋值符号<code>:=</code>是stylus的语法，意思是当变量被赋值过时，则忽略本次赋值。所以我们可以通过<code>import</code>提前加载一个变量定义文件，来让kpc中的默认定义失效</p>\n</blockquote>\n<h2 id='header-%E6%B7%BB%E5%8A%A0%E6%96%B0%E6%A0%B7%E5%BC%8F'>添加新样式</h2><p>并非所有的样式修改都可以通过修改变量来实现，因为变量只能重新定义已有的样式的值，但不能新增样式。例如：<code>Button</code>组件的<code>type</code>只内置了<code>default | primary | warning | danger | none</code>几种样式，如果我们想向主题中添加一种<code>dashed</code>虚边框的按钮，则不能通过修改变量得到。也许你会想，我们可以在全局样式中，将<code>dashed</code>按钮的样式定义好，然后在需要该样式的地方添加相应类名即可。是的，这样的确能实现，但弊端是不能按需加载，因为在全局样式中，即使我不使用<code>Button</code>组件，该样式也会加载。而如果将该样式文件单独定义，然后在用到<code>Button</code>的地方，再手动加载它，又显得麻烦。</p>\n<p>其实kpc加载每一个组件的样式时，会检测是否存在对应的主题文件，如果存在就会默认加载它。通过该机制，我们可以很方便地在主题中添加样式。</p>\n<p>以上文提到的<code>dashed</code>按钮为例：</p>\n<h3 id='header-%E6%8C%87%E5%AE%9A%24theme-dir'>指定<code>$theme-dir</code></h3><p>首先我们需要在主题文件<code>styles/mytheme/index.styl</code>中指定<code>$theme-dir</code>变量，来告诉kpc主题文件的位置。遗憾的是，stylus中并没有类似<code>__dirname</code>的全局变量，不过我们可以通过stylus的<code>use</code>方法来实现。</p>\n<ol>\n<li>在<code>styles/mytheme/</code>下新建js文件<code>dirname.js</code>，定义<code>__dirname</code>方法</li>\n</ol>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">style</span>) </span>{\n        style.define(<span class=\"hljs-string\">'__dirname'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> path.dirname(style.nodes.filename);\n        });\n    };\n};\n</code></pre>\n<ol start=\"2\">\n<li>在主题文件<code>styles/mytheme/index.styl</code>中<code>use</code>上述<code>dirname.js</code>，并定义<code>$theme-dir</code></li>\n</ol>\n<pre><code class=\"hljs styl\"><span class=\"hljs-function\"><span class=\"hljs-title\">use</span><span class=\"hljs-params\">(<span class=\"hljs-string\">'./dirname.js'</span>)</span></span>\n<span class=\"hljs-variable\">$theme</span>-dir := __dirname()\n\n<span class=\"hljs-comment\">// 以下为变量定义</span>\n...\n</code></pre>\n<p>此时<code>$theme-dir</code>指向<code>styles/mytheme</code>目录，kpc会在该目录下检测主题文件。</p>\n<blockquote>\n<p>kpc已经定义好了stylus的<code>__dirname</code>方法，你也可以直接使用<code>use(&#39;../../node_modules/kpc/styles/functions.js&#39;)</code>。具体加载路径根据你的主题文件路径而定</p>\n</blockquote>\n<ol start=\"3\">\n<li>在<code>styles/mytheme/</code>下新建<code>button.styl</code>文件（文件名必须与组件名对应），添加<code>k-dashed</code>\n样式定义</li>\n</ol>\n<pre><code class=\"hljs styl\"><span class=\"hljs-selector-class\">.k-dashed</span>\n    <span class=\"hljs-attribute\">border</span> <span class=\"hljs-number\">1px</span> dashed <span class=\"hljs-number\">#eee</span> \n</code></pre>\n<p>此时，当我们加载<code>Button</code>组件时，上述样式也会加载进来。真正做到按需加载，并且无需额外插件支持。</p>\n<h1 id='header-%E5%8F%91%E5%B8%83%E4%B8%BB%E9%A2%98'>发布主题</h1><p>我们可以将定义好的主题文件，发布到npm供他人使用。使用者只需要改变<code>stylus-loader</code>中的<code>import</code>配置，指向你发布的主题文件<code>index.styl</code>即可。</p>\n<p>热烈欢迎大家积极发布自己的主题来让kpc丰富多彩起来 <i class=\"k-icon ion-android-happy\"></i></p>\n",
    "index": 130
}