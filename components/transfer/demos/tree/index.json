{
    "setting": {
        "title": "与树形控件结合",
        "order": 4
    },
    "catalogs": [],
    "contents": "<p>与【完全自定义】示例一样，<code>Transfer</code>也可以与<code>Tree</code>结合使用</p>\n",
    "index": 227,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> Transfer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/transfer'</span>;\n<span class=\"hljs-keyword\">import</span> Tree <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/tree'</span>;\n\n&lt;Transfer\n    enableAdd={{ self.enableAdd }}\n    enableRemove={{ self.enableRemove }}\n    ev-add={{ self.onAdd }}\n    ev-remove={{ self.onRemove }}\n&gt;\n    &lt;b:header params=\"type\"&gt;\n        &lt;div v-if={{ type === 'left' }}&gt;请选择&lt;/div&gt;\n        &lt;div v-else&gt;已选择&lt;/div&gt;\n    &lt;/b:header&gt;\n    &lt;b:list params=\"type\"&gt;\n        &lt;Tree v-if={{ type === 'left' }}\n            data={{ self.get('leftData') }}\n            checkbox\n            v-model:checkedKeys=\"leftCheckedKeys\"\n            v-model:expandedKeys=\"leftExpandedKeys\"\n            ref=\"left\"\n        /&gt;\n        &lt;Tree v-else\n            data={{ self.get('rightData') }}\n            checkbox\n            v-model:checkedKeys=\"rightCheckedKeys\"\n            v-model:expandedKeys=\"rightExpandedKeys\"\n            ref=\"right\"\n        /&gt;\n    &lt;/b:list&gt;\n&lt;/Transfer&gt;</code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    defaults() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">data</span>: [\n                {\n                    <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'database'</span>,\n                    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'database'</span>,\n                    <span class=\"hljs-attr\">children</span>: [\n                        {\n                            <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'table1'</span>,\n                            <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'table1'</span>,\n                            <span class=\"hljs-attr\">children</span>: [\n                                {\n                                    <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'class'</span>,\n                                    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'class'</span>\n                                },\n                                {\n                                    <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'student'</span>,\n                                    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'student'</span>\n                                }\n                            ]\n                        },\n                        {\n                            <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'table2'</span>,\n                            <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'table2'</span>,\n                            <span class=\"hljs-attr\">children</span>: [\n                                {\n                                    <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'id'</span>,\n                                    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'id'</span>,\n                                },\n                                {\n                                    <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'name'</span>,\n                                    <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'name'</span>\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            <span class=\"hljs-attr\">leftCheckedKeys</span>: [],\n            <span class=\"hljs-attr\">rightCheckedKeys</span>: [],\n            <span class=\"hljs-attr\">leftExpandedKeys</span>: [],\n            <span class=\"hljs-attr\">rightExpandedKeys</span>: [],\n            <span class=\"hljs-attr\">leftData</span>: [],\n            <span class=\"hljs-attr\">rightData</span>: []\n        };\n    }\n\n    _init() {\n        <span class=\"hljs-comment\">// expand all nodes</span>\n        <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'data'</span>);\n        <span class=\"hljs-keyword\">const</span> allKeys = [];\n        <span class=\"hljs-keyword\">const</span> loop = (<span class=\"hljs-function\"><span class=\"hljs-params\">children</span> =&gt;</span> {\n            <span class=\"hljs-keyword\">if</span> (children) {\n                children.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> {\n                    allKeys.push(item.key);\n                    loop(item.children);\n                });\n            }\n        });\n        loop(data);\n        <span class=\"hljs-keyword\">this</span>.set({\n            <span class=\"hljs-attr\">leftExpandedKeys</span>: allKeys,\n            <span class=\"hljs-attr\">rightExpandedKeys</span>: allKeys,\n            <span class=\"hljs-attr\">leftData</span>: <span class=\"hljs-keyword\">this</span>.deepClone(data),\n        });\n    }\n\n    enableAdd() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'leftCheckedKeys'</span>).length &gt; <span class=\"hljs-number\">0</span>;\n    }\n\n    enableRemove() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'rightCheckedKeys'</span>).length &gt; <span class=\"hljs-number\">0</span>;\n    }\n\n    onAdd() {\n        <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">from</span>, to} = <span class=\"hljs-keyword\">this</span>.moveData(<span class=\"hljs-keyword\">this</span>.refs.left, <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'leftData'</span>), <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'rightData'</span>));\n        <span class=\"hljs-keyword\">this</span>.set({<span class=\"hljs-attr\">leftData</span>: <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-attr\">rightData</span>: to, <span class=\"hljs-attr\">leftCheckedKeys</span>: []});\n    }\n\n    onRemove() {\n        <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">from</span>, to} = <span class=\"hljs-keyword\">this</span>.moveData(<span class=\"hljs-keyword\">this</span>.refs.right, <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'rightData'</span>), <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'leftData'</span>));\n        <span class=\"hljs-keyword\">this</span>.set({<span class=\"hljs-attr\">leftData</span>: to, <span class=\"hljs-attr\">rightData</span>: <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-attr\">rightCheckedKeys</span>: []});\n    }\n\n    moveData(tree, <span class=\"hljs-keyword\">from</span>, to) {\n        <span class=\"hljs-keyword\">from</span> = <span class=\"hljs-keyword\">this</span>.deepClone(<span class=\"hljs-keyword\">from</span>);\n        to = <span class=\"hljs-keyword\">this</span>.deepClone(to);\n        <span class=\"hljs-keyword\">const</span> loop = <span class=\"hljs-function\">(<span class=\"hljs-params\">children, <span class=\"hljs-keyword\">from</span>, to</span>) =&gt;</span> {\n            <span class=\"hljs-keyword\">let</span> deleteCount = <span class=\"hljs-number\">0</span>;\n            children.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node, index</span>) =&gt;</span> {\n                <span class=\"hljs-keyword\">const</span> data = node.data;\n                <span class=\"hljs-keyword\">if</span> (node.checked) {\n                    <span class=\"hljs-comment\">// remove from `from` </span>\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">from</span>) {\n                        <span class=\"hljs-keyword\">from</span>.splice(index - deleteCount, <span class=\"hljs-number\">1</span>);\n                        deleteCount++;\n                    }\n                    <span class=\"hljs-comment\">// add to `to` </span>\n                    <span class=\"hljs-keyword\">let</span> newData = to.find(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.key === data.key);\n                    <span class=\"hljs-keyword\">if</span> (!newData) {\n                        to.push(<span class=\"hljs-keyword\">this</span>.deepClone(data));\n                    } <span class=\"hljs-keyword\">else</span> {\n                        loop(node.children, <span class=\"hljs-literal\">null</span>, newData.children);\n                    }\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.indeterminate) {\n                    <span class=\"hljs-keyword\">let</span> newData = to.find(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.key === data.key);\n                    <span class=\"hljs-keyword\">if</span> (!newData) {\n                        newData = {...data, <span class=\"hljs-attr\">children</span>: []};\n                        to.push(newData);\n                    }\n                    loop(node.children, <span class=\"hljs-keyword\">from</span>[index - deleteCount].children, newData.children);\n                }\n            });\n        };\n\n        loop(tree.root.children, <span class=\"hljs-keyword\">from</span>, to);\n\n        <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-keyword\">from</span>, to};\n    }\n\n    deepClone(data) {\n        <span class=\"hljs-keyword\">if</span> (data == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> data;\n\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(data)) {\n            <span class=\"hljs-keyword\">return</span> data.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.deepClone(item);\n            });\n        } \n\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> data === <span class=\"hljs-string\">'object'</span>) {\n            <span class=\"hljs-keyword\">const</span> ret = {};\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> data) {\n                ret[key] = <span class=\"hljs-keyword\">this</span>.deepClone(data[key]);\n            }           \n            <span class=\"hljs-keyword\">return</span> ret;\n        }\n\n        <span class=\"hljs-keyword\">return</span> data;\n    }\n}</code></pre>"
        },
        {
            "language": "vue",
            "content": "<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Transfer</span>\n        <span class=\"hljs-attr\">:enableAdd</span>=<span class=\"hljs-string\">\"enableAdd\"</span>\n        <span class=\"hljs-attr\">:enableRemove</span>=<span class=\"hljs-string\">\"enableRemove\"</span>\n        @<span class=\"hljs-attr\">add</span>=<span class=\"hljs-string\">\"onAdd\"</span>\n        @<span class=\"hljs-attr\">remove</span>=<span class=\"hljs-string\">\"onRemove\"</span>\n    &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"header\"</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"type\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"type === 'left'\"</span>&gt;</span>请选择<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>已选择<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">\"list\"</span> <span class=\"hljs-attr\">slot-scope</span>=<span class=\"hljs-string\">\"type\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tree</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"type === 'left'\"</span>\n                <span class=\"hljs-attr\">:data</span>=<span class=\"hljs-string\">\"leftData\"</span>\n                <span class=\"hljs-attr\">checkbox</span>\n                <span class=\"hljs-attr\">:checkedKeys.sync</span>=<span class=\"hljs-string\">\"leftCheckedKeys\"</span>\n                <span class=\"hljs-attr\">:expandedKeys.sync</span>=<span class=\"hljs-string\">\"leftExpandedKeys\"</span>\n                <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"left\"</span>\n            /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tree</span> <span class=\"hljs-attr\">v-else</span>\n                <span class=\"hljs-attr\">:data</span>=<span class=\"hljs-string\">\"rightData\"</span>\n                <span class=\"hljs-attr\">checkbox</span>\n                <span class=\"hljs-attr\">:checkedKeys.sync</span>=<span class=\"hljs-string\">\"rightCheckedKeys\"</span>\n                <span class=\"hljs-attr\">:expandedKeys.sync</span>=<span class=\"hljs-string\">\"rightExpandedKeys\"</span>\n                <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"right\"</span>\n            /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Transfer</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> Transfer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-vue/components/transfer'</span>;\n<span class=\"hljs-keyword\">import</span> Tree <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-vue/components/tree'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: {\n        Transfer, Tree\n    },\n    data() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-string\">\"leftData\"</span>: [],\n            <span class=\"hljs-string\">\"rightData\"</span>: [],\n            <span class=\"hljs-string\">\"leftCheckedKeys\"</span>: [],\n            <span class=\"hljs-string\">\"leftExpandedKeys\"</span>: [],\n            <span class=\"hljs-string\">\"rightCheckedKeys\"</span>: [],\n            <span class=\"hljs-string\">\"rightExpandedKeys\"</span>: [],\n            <span class=\"hljs-string\">\"data\"</span>: [\n                {\n                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"database\"</span>,\n                    <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"database\"</span>,\n                    <span class=\"hljs-string\">\"children\"</span>: [\n                        {\n                            <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"table1\"</span>,\n                            <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"table1\"</span>,\n                            <span class=\"hljs-string\">\"children\"</span>: [\n                                {\n                                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"class\"</span>,\n                                    <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"class\"</span>\n                                },\n                                {\n                                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"student\"</span>,\n                                    <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"student\"</span>\n                                }\n                            ]\n                        },\n                        {\n                            <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"table2\"</span>,\n                            <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"table2\"</span>,\n                            <span class=\"hljs-string\">\"children\"</span>: [\n                                {\n                                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"id\"</span>,\n                                    <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"id\"</span>\n                                },\n                                {\n                                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"name\"</span>,\n                                    <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"name\"</span>\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n        enableAdd() {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.leftCheckedKeys.length &gt; <span class=\"hljs-number\">0</span>;\n        },\n        enableRemove() {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rightCheckedKeys.length &gt; <span class=\"hljs-number\">0</span>;\n        },\n        onAdd() {\n            <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">from</span>, to} = <span class=\"hljs-keyword\">this</span>.moveData(<span class=\"hljs-keyword\">this</span>.$refs.left, <span class=\"hljs-keyword\">this</span>.leftData, <span class=\"hljs-keyword\">this</span>.rightData);\n            <span class=\"hljs-keyword\">this</span>.set({<span class=\"hljs-attr\">leftData</span>: <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-attr\">rightData</span>: to, <span class=\"hljs-attr\">leftCheckedKeys</span>: []});\n        },\n        onRemove() {\n            <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">from</span>, to} = <span class=\"hljs-keyword\">this</span>.moveData(<span class=\"hljs-keyword\">this</span>.$refs.right, <span class=\"hljs-keyword\">this</span>.rightData, <span class=\"hljs-keyword\">this</span>.leftData);\n            <span class=\"hljs-keyword\">this</span>.set({<span class=\"hljs-attr\">leftData</span>: to, <span class=\"hljs-attr\">rightData</span>: <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-attr\">rightCheckedKeys</span>: []});\n        },\n        moveData(tree, <span class=\"hljs-keyword\">from</span>, to) {\n            <span class=\"hljs-keyword\">from</span> = <span class=\"hljs-keyword\">this</span>.deepClone(<span class=\"hljs-keyword\">from</span>);\n            to = <span class=\"hljs-keyword\">this</span>.deepClone(to);\n            <span class=\"hljs-keyword\">const</span> loop = <span class=\"hljs-function\">(<span class=\"hljs-params\">children, <span class=\"hljs-keyword\">from</span>, to</span>) =&gt;</span> {\n                <span class=\"hljs-keyword\">let</span> deleteCount = <span class=\"hljs-number\">0</span>;\n                children.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node, index</span>) =&gt;</span> {\n                    <span class=\"hljs-keyword\">const</span> data = node.data;\n                    <span class=\"hljs-keyword\">if</span> (node.checked) {\n                        <span class=\"hljs-comment\">// remove from `from` </span>\n                        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">from</span>) {\n                            <span class=\"hljs-keyword\">from</span>.splice(index - deleteCount, <span class=\"hljs-number\">1</span>);\n                            deleteCount++;\n                        }\n                        <span class=\"hljs-comment\">// add to `to` </span>\n                        <span class=\"hljs-keyword\">let</span> newData = to.find(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.key === data.key);\n                        <span class=\"hljs-keyword\">if</span> (!newData) {\n                            to.push(<span class=\"hljs-keyword\">this</span>.deepClone(data));\n                        } <span class=\"hljs-keyword\">else</span> {\n                            loop(node.children, <span class=\"hljs-literal\">null</span>, newData.children);\n                        }\n                    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.indeterminate) {\n                        <span class=\"hljs-keyword\">let</span> newData = to.find(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.key === data.key);\n                        <span class=\"hljs-keyword\">if</span> (!newData) {\n                            newData = {...data, <span class=\"hljs-attr\">children</span>: []};\n                            to.push(newData);\n                        }\n                        loop(node.children, <span class=\"hljs-keyword\">from</span>[index - deleteCount].children, newData.children);\n                    }\n                });\n            };\n        \n            loop(tree.root.children, <span class=\"hljs-keyword\">from</span>, to);\n        \n            <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-keyword\">from</span>, to};\n        },\n        deepClone(data) {\n            <span class=\"hljs-keyword\">if</span> (data == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> data;\n        \n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(data)) {\n                <span class=\"hljs-keyword\">return</span> data.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.deepClone(item);\n                });\n            } \n        \n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> data === <span class=\"hljs-string\">'object'</span>) {\n                <span class=\"hljs-keyword\">const</span> ret = {};\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> data) {\n                    ret[key] = <span class=\"hljs-keyword\">this</span>.deepClone(data[key]);\n                }           \n                <span class=\"hljs-keyword\">return</span> ret;\n            }\n        \n            <span class=\"hljs-keyword\">return</span> data;\n        },\n    },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>"
        },
        {
            "language": "jsx",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> Transfer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-react/components/transfer'</span>;\n<span class=\"hljs-keyword\">import</span> Tree <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-react/components/tree'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>(props) {\n        <span class=\"hljs-keyword\">super</span>(props);\n        <span class=\"hljs-keyword\">this</span>.state = {\n            <span class=\"hljs-string\">\"data\"</span>: [\n                {\n                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"database\"</span>,\n                    <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"database\"</span>,\n                    <span class=\"hljs-string\">\"children\"</span>: [\n                        {\n                            <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"table1\"</span>,\n                            <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"table1\"</span>,\n                            <span class=\"hljs-string\">\"children\"</span>: [\n                                {\n                                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"class\"</span>,\n                                    <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"class\"</span>\n                                },\n                                {\n                                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"student\"</span>,\n                                    <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"student\"</span>\n                                }\n                            ]\n                        },\n                        {\n                            <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"table2\"</span>,\n                            <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"table2\"</span>,\n                            <span class=\"hljs-string\">\"children\"</span>: [\n                                {\n                                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"id\"</span>,\n                                    <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"id\"</span>\n                                },\n                                {\n                                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"name\"</span>,\n                                    <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"name\"</span>\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ],\n            <span class=\"hljs-string\">\"leftCheckedKeys\"</span>: [],\n            <span class=\"hljs-string\">\"rightCheckedKeys\"</span>: [],\n            <span class=\"hljs-string\">\"leftExpandedKeys\"</span>: [],\n            <span class=\"hljs-string\">\"rightExpandedKeys\"</span>: [],\n            <span class=\"hljs-string\">\"leftData\"</span>: [],\n            <span class=\"hljs-string\">\"rightData\"</span>: []\n        };\n        <span class=\"hljs-keyword\">this</span>.enableAdd = <span class=\"hljs-keyword\">this</span>.enableAdd.bind(<span class=\"hljs-keyword\">this</span>);\n        <span class=\"hljs-keyword\">this</span>.enableRemove = <span class=\"hljs-keyword\">this</span>.enableRemove.bind(<span class=\"hljs-keyword\">this</span>);\n        <span class=\"hljs-keyword\">this</span>.onAdd = <span class=\"hljs-keyword\">this</span>.onAdd.bind(<span class=\"hljs-keyword\">this</span>);\n        <span class=\"hljs-keyword\">this</span>.onRemove = <span class=\"hljs-keyword\">this</span>.onRemove.bind(<span class=\"hljs-keyword\">this</span>);\n        <span class=\"hljs-keyword\">this</span>.moveData = <span class=\"hljs-keyword\">this</span>.moveData.bind(<span class=\"hljs-keyword\">this</span>);\n        <span class=\"hljs-keyword\">this</span>.deepClone = <span class=\"hljs-keyword\">this</span>.deepClone.bind(<span class=\"hljs-keyword\">this</span>);\n    }\n\n    enableAdd() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.state.leftCheckedKeys.length &gt; <span class=\"hljs-number\">0</span>;\n    }\n    \n    enableRemove() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.state.rightCheckedKeys.length &gt; <span class=\"hljs-number\">0</span>;\n    }\n    \n    onAdd() {\n        <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">from</span>, to} = <span class=\"hljs-keyword\">this</span>.moveData(<span class=\"hljs-keyword\">this</span>.left, <span class=\"hljs-keyword\">this</span>.state.leftData, <span class=\"hljs-keyword\">this</span>.state.rightData);\n        <span class=\"hljs-keyword\">this</span>.setState({<span class=\"hljs-attr\">leftData</span>: <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-attr\">rightData</span>: to, <span class=\"hljs-attr\">leftCheckedKeys</span>: []});\n    }\n    \n    onRemove() {\n        <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">from</span>, to} = <span class=\"hljs-keyword\">this</span>.moveData(<span class=\"hljs-keyword\">this</span>.right, <span class=\"hljs-keyword\">this</span>.state.rightData, <span class=\"hljs-keyword\">this</span>.state.leftData);\n        <span class=\"hljs-keyword\">this</span>.setState({<span class=\"hljs-attr\">leftData</span>: to, <span class=\"hljs-attr\">rightData</span>: <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-attr\">rightCheckedKeys</span>: []});\n    }\n    \n    moveData(tree, <span class=\"hljs-keyword\">from</span>, to) {\n        <span class=\"hljs-keyword\">from</span> = <span class=\"hljs-keyword\">this</span>.deepClone(<span class=\"hljs-keyword\">from</span>);\n        to = <span class=\"hljs-keyword\">this</span>.deepClone(to);\n        <span class=\"hljs-keyword\">const</span> loop = <span class=\"hljs-function\">(<span class=\"hljs-params\">children, <span class=\"hljs-keyword\">from</span>, to</span>) =&gt;</span> {\n            <span class=\"hljs-keyword\">let</span> deleteCount = <span class=\"hljs-number\">0</span>;\n            children.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node, index</span>) =&gt;</span> {\n                <span class=\"hljs-keyword\">const</span> data = node.data;\n                <span class=\"hljs-keyword\">if</span> (node.checked) {\n                    <span class=\"hljs-comment\">// remove from `from` </span>\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">from</span>) {\n                        <span class=\"hljs-keyword\">from</span>.splice(index - deleteCount, <span class=\"hljs-number\">1</span>);\n                        deleteCount++;\n                    }\n                    <span class=\"hljs-comment\">// add to `to` </span>\n                    <span class=\"hljs-keyword\">let</span> newData = to.find(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.key === data.key);\n                    <span class=\"hljs-keyword\">if</span> (!newData) {\n                        to.push(<span class=\"hljs-keyword\">this</span>.deepClone(data));\n                    } <span class=\"hljs-keyword\">else</span> {\n                        loop(node.children, <span class=\"hljs-literal\">null</span>, newData.children);\n                    }\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.indeterminate) {\n                    <span class=\"hljs-keyword\">let</span> newData = to.find(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.key === data.key);\n                    <span class=\"hljs-keyword\">if</span> (!newData) {\n                        newData = {...data, <span class=\"hljs-attr\">children</span>: []};\n                        to.push(newData);\n                    }\n                    loop(node.children, <span class=\"hljs-keyword\">from</span>[index - deleteCount].children, newData.children);\n                }\n            });\n        };\n    \n        loop(tree.root.children, <span class=\"hljs-keyword\">from</span>, to);\n    \n        <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-keyword\">from</span>, to};\n    }\n    \n    deepClone(data) {\n        <span class=\"hljs-keyword\">if</span> (data == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> data;\n    \n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(data)) {\n            <span class=\"hljs-keyword\">return</span> data.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.deepClone(item);\n            });\n        } \n    \n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> data === <span class=\"hljs-string\">'object'</span>) {\n            <span class=\"hljs-keyword\">const</span> ret = {};\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> data) {\n                ret[key] = <span class=\"hljs-keyword\">this</span>.deepClone(data[key]);\n            }           \n            <span class=\"hljs-keyword\">return</span> ret;\n        }\n    \n        <span class=\"hljs-keyword\">return</span> data;\n    }\n    \n    render() {\n        <span class=\"hljs-keyword\">return</span> (\n            &lt;Transfer\n                b-header={(type) =&gt; {\n                    return &lt;React.Fragment&gt;\n                        {type === 'left' ?\n                            &lt;div&gt;请选择&lt;/div&gt; :\n                            &lt;div&gt;已选择&lt;/div&gt;\n                        }\n                    &lt;/React.Fragment&gt;\n                }}\n                b-list={(type) =&gt; {\n                    return &lt;React.Fragment&gt;\n                        {type === 'left' ?\n                            &lt;Tree\n                                data={this.state.leftData}\n                                checkbox\n                                checkedKeys={this.state.leftCheckedKeys}\n                                on$change-checkedKeys={(c, leftCheckedKeys) =&gt; this.setState({leftCheckedKeys})}\n                                expandedKeys={this.state.leftExpandedKeys}\n                                on$change-expandedKeys={(c, leftExpandedKeys) =&gt; this.setState({leftExpandedKeys})}\n                                ref={i =&gt; this.left = i}\n                            /&gt; :\n                            &lt;Tree\n                                data={this.state.rightData}\n                                checkbox\n                                checkedKeys={this.state.rightCheckedKeys}\n                                on$change-checkedKeys={(c, rightCheckedKeys) =&gt; this.setState({rightCheckedKeys})}\n                                expandedKeys={this.state.rightExpandedKeys}\n                                on$change-expandedKeys={(c, rightExpandedKeys) =&gt; this.setState({rightExpandedKeys})}\n                                ref={i =&gt; this.right = i}\n                            /&gt;\n                        }\n                    &lt;/React.Fragment&gt;\n                }}\n                enableAdd={this.enableAdd}\n                enableRemove={this.enableRemove}\n                onAdd={this.onAdd}\n                onRemove={this.onRemove}\n            &gt;\n            &lt;/Transfer&gt;\n        )\n    }\n}</code></pre>"
        },
        {
            "language": "ts",
            "content": "<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> {Component, ViewChild} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n    selector: <span class=\"hljs-string\">'app-demo'</span>,\n    template: <span class=\"hljs-string\">`\n        &lt;k-transfer\n            [enableAdd]=\"enableAdd\"\n            [enableRemove]=\"enableRemove\"\n            (add)=\"onAdd($event)\"\n            (remove)=\"onRemove($event)\"\n        &gt;\n            &lt;ng-template #header let-type=\"args[0]\"&gt;\n                &lt;div *ngIf=\"type === 'left'\"&gt;请选择&lt;/div&gt;\n                &lt;div *ngIf=\"!((type === 'left'))\"&gt;已选择&lt;/div&gt;\n            &lt;/ng-template&gt;\n            &lt;ng-template #list let-type=\"args[0]\"&gt;\n                &lt;k-tree *ngIf=\"type === 'left'\"\n                    [data]=\"leftData\"\n                    [checkbox]=\"true\"\n                    [(checkedKeys)]=\"leftCheckedKeys\"\n                    [(expandedKeys)]=\"leftExpandedKeys\"\n                    #left\n                &gt;&lt;/k-tree&gt;\n                &lt;k-tree *ngIf=\"!((type === 'left'))\"\n                    [data]=\"rightData\"\n                    [checkbox]=\"true\"\n                    [(checkedKeys)]=\"rightCheckedKeys\"\n                    [(expandedKeys)]=\"rightExpandedKeys\"\n                    #right\n                &gt;&lt;/k-tree&gt;\n            &lt;/ng-template&gt;\n        &lt;/k-transfer&gt;\n    `</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppDemoComponent {\n    <span class=\"hljs-meta\">@ViewChild</span>(<span class=\"hljs-string\">'left'</span>, {<span class=\"hljs-keyword\">static</span>: <span class=\"hljs-literal\">false</span>}) left;\n    <span class=\"hljs-meta\">@ViewChild</span>(<span class=\"hljs-string\">'right'</span>, {<span class=\"hljs-keyword\">static</span>: <span class=\"hljs-literal\">false</span>}) right;\n\n    <span class=\"hljs-keyword\">private</span> leftData = [];\n    <span class=\"hljs-keyword\">private</span> rightData = [];\n    <span class=\"hljs-keyword\">private</span> leftCheckedKeys = [];\n    <span class=\"hljs-keyword\">private</span> leftExpandedKeys = [];\n    <span class=\"hljs-keyword\">private</span> rightCheckedKeys = [];\n    <span class=\"hljs-keyword\">private</span> rightExpandedKeys = [];\n    <span class=\"hljs-keyword\">private</span> data = [\n        {\n            <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"database\"</span>,\n            <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"database\"</span>,\n            <span class=\"hljs-string\">\"children\"</span>: [\n                {\n                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"table1\"</span>,\n                    <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"table1\"</span>,\n                    <span class=\"hljs-string\">\"children\"</span>: [\n                        {\n                            <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"class\"</span>,\n                            <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"class\"</span>\n                        },\n                        {\n                            <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"student\"</span>,\n                            <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"student\"</span>\n                        }\n                    ]\n                },\n                {\n                    <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"table2\"</span>,\n                    <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"table2\"</span>,\n                    <span class=\"hljs-string\">\"children\"</span>: [\n                        {\n                            <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"id\"</span>,\n                            <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"id\"</span>\n                        },\n                        {\n                            <span class=\"hljs-string\">\"label\"</span>: <span class=\"hljs-string\">\"name\"</span>,\n                            <span class=\"hljs-string\">\"key\"</span>: <span class=\"hljs-string\">\"name\"</span>\n                        }\n                    ]\n                }\n            ]\n        }\n    ];\n\n    <span class=\"hljs-comment\">// helper function</span>\n    <span class=\"hljs-keyword\">set</span>(obj) { <span class=\"hljs-built_in\">Object</span>.keys(obj).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>[key] = obj[key]); }\n    \n    enableAdd = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.leftCheckedKeys.length &gt; <span class=\"hljs-number\">0</span>;\n    }\n    \n    enableRemove = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rightCheckedKeys.length &gt; <span class=\"hljs-number\">0</span>;\n    }\n    \n    onAdd() {\n        <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">from</span>, to} = <span class=\"hljs-keyword\">this</span>.moveData(<span class=\"hljs-keyword\">this</span>.left, <span class=\"hljs-keyword\">this</span>.leftData, <span class=\"hljs-keyword\">this</span>.rightData);\n        <span class=\"hljs-keyword\">this</span>.set({leftData: <span class=\"hljs-keyword\">from</span>, rightData: to, leftCheckedKeys: []});\n    }\n    \n    onRemove() {\n        <span class=\"hljs-keyword\">const</span> {<span class=\"hljs-keyword\">from</span>, to} = <span class=\"hljs-keyword\">this</span>.moveData(<span class=\"hljs-keyword\">this</span>.right, <span class=\"hljs-keyword\">this</span>.rightData, <span class=\"hljs-keyword\">this</span>.leftData);\n        <span class=\"hljs-keyword\">this</span>.set({leftData: to, rightData: <span class=\"hljs-keyword\">from</span>, rightCheckedKeys: []});\n    }\n    \n    moveData(tree, <span class=\"hljs-keyword\">from</span>, to) {\n        <span class=\"hljs-keyword\">from</span> = <span class=\"hljs-keyword\">this</span>.deepClone(<span class=\"hljs-keyword\">from</span>);\n        to = <span class=\"hljs-keyword\">this</span>.deepClone(to);\n        <span class=\"hljs-keyword\">const</span> loop = <span class=\"hljs-function\">(<span class=\"hljs-params\">children, <span class=\"hljs-keyword\">from</span>, to</span>) =&gt;</span> {\n            <span class=\"hljs-keyword\">let</span> deleteCount = <span class=\"hljs-number\">0</span>;\n            children.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">node, index</span>) =&gt;</span> {\n                <span class=\"hljs-keyword\">const</span> data = node.data;\n                <span class=\"hljs-keyword\">if</span> (node.checked) {\n                    <span class=\"hljs-comment\">// remove from `from` </span>\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">from</span>) {\n                        <span class=\"hljs-keyword\">from</span>.splice(index - deleteCount, <span class=\"hljs-number\">1</span>);\n                        deleteCount++;\n                    }\n                    <span class=\"hljs-comment\">// add to `to` </span>\n                    <span class=\"hljs-keyword\">let</span> newData = to.find(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.key === data.key);\n                    <span class=\"hljs-keyword\">if</span> (!newData) {\n                        to.push(<span class=\"hljs-keyword\">this</span>.deepClone(data));\n                    } <span class=\"hljs-keyword\">else</span> {\n                        loop(node.children, <span class=\"hljs-literal\">null</span>, newData.children);\n                    }\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.indeterminate) {\n                    <span class=\"hljs-keyword\">let</span> newData = to.find(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.key === data.key);\n                    <span class=\"hljs-keyword\">if</span> (!newData) {\n                        newData = {...data, children: []};\n                        to.push(newData);\n                    }\n                    loop(node.children, <span class=\"hljs-keyword\">from</span>[index - deleteCount].children, newData.children);\n                }\n            });\n        };\n    \n        loop(tree.root.children, <span class=\"hljs-keyword\">from</span>, to);\n    \n        <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-keyword\">from</span>, to};\n    }\n    \n    deepClone(data) {\n        <span class=\"hljs-keyword\">if</span> (data == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> data;\n    \n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(data)) {\n            <span class=\"hljs-keyword\">return</span> data.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.deepClone(item);\n            });\n        } \n    \n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> data === <span class=\"hljs-string\">'object'</span>) {\n            <span class=\"hljs-keyword\">const</span> ret = {};\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> data) {\n                ret[key] = <span class=\"hljs-keyword\">this</span>.deepClone(data[key]);\n            }           \n            <span class=\"hljs-keyword\">return</span> ret;\n        }\n    \n        <span class=\"hljs-keyword\">return</span> data;\n    }\n}</code></pre>"
        }
    ]
}