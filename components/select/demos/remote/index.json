{
    "setting": {
        "title": "远程搜索",
        "order": 4.1
    },
    "catalogs": [],
    "contents": "<p>监听<code>$change:keywords</code>事件，可以在关键词变化时进行远程搜索，此时需要将过滤函数设为<code>() =&gt; true</code>让它不要真正去过滤结果。</p>\n",
    "index": 239,
    "highlighted": [
        {
            "language": "vdt",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> {Select, Option} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc/components/select'</span>;\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Select</span> <span class=\"hljs-attr\">filterable</span> <span class=\"hljs-attr\">filter</span>=<span class=\"hljs-string\">{{</span> () =&gt;</span> true }} ev-$change:keywords={{ self.search }}&gt;\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Option</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">self.get</span>('<span class=\"hljs-attr\">users</span>') }} \n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">value.login.username</span> }}\n    &gt;</span>{{ value.name.first }} {{ value.name.last }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Option</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Select</span>&gt;</span></span></code></pre>"
        },
        {
            "language": "js",
            "content": "<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Intact <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'intact'</span>;\n<span class=\"hljs-keyword\">import</span> template <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.vdt'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Intact</span> </span>{\n    @Intact.template()\n    <span class=\"hljs-keyword\">static</span> template = template;\n\n    defaults() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">users</span>: []\n        }\n    }\n\n    _init() {\n        <span class=\"hljs-keyword\">this</span>.lastFetchId = <span class=\"hljs-number\">0</span>;\n    }\n\n    search(select, keywords) {\n        <span class=\"hljs-built_in\">console</span>.log(keywords);\n\n        <span class=\"hljs-keyword\">if</span> (!keywords) <span class=\"hljs-keyword\">return</span>;\n\n        <span class=\"hljs-keyword\">const</span> fetchId = ++<span class=\"hljs-keyword\">this</span>.lastFetchId\n        fetch(<span class=\"hljs-string\">'https://randomuser.me/api/?results=10'</span>)\n            .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.json())\n            .then(<span class=\"hljs-function\"><span class=\"hljs-params\">body</span> =&gt;</span> {\n                <span class=\"hljs-keyword\">if</span> (fetchId !== <span class=\"hljs-keyword\">this</span>.lastFetchId) <span class=\"hljs-keyword\">return</span>;\n                <span class=\"hljs-keyword\">this</span>.set(<span class=\"hljs-string\">'users'</span>, body.results);\n            });\n    }\n}</code></pre>"
        },
        {
            "language": "vue",
            "content": "<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Select</span> <span class=\"hljs-attr\">filterable</span> <span class=\"hljs-attr\">:filter</span>=<span class=\"hljs-string\">\"() =&gt; true\"</span> @$<span class=\"hljs-attr\">change:keywords</span>=<span class=\"hljs-string\">\"search\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Option</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(value, key) in users\"</span> \n            <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">\"value.login.username\"</span>\n        &gt;</span>{{ value.name.first }} {{ value.name.last }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Select</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> {Select, Option} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-vue/components/select'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">components</span>: {\n        Select, Option\n    },\n    data() {\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-string\">\"users\"</span>: []\n        }\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n        search(select, keywords) {\n            <span class=\"hljs-built_in\">console</span>.log(keywords);\n        \n            <span class=\"hljs-keyword\">if</span> (!keywords) <span class=\"hljs-keyword\">return</span>;\n        \n            <span class=\"hljs-keyword\">const</span> fetchId = ++<span class=\"hljs-keyword\">this</span>.lastFetchId\n            fetch(<span class=\"hljs-string\">'https://randomuser.me/api/?results=10'</span>)\n                .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.json())\n                .then(<span class=\"hljs-function\"><span class=\"hljs-params\">body</span> =&gt;</span> {\n                    <span class=\"hljs-keyword\">if</span> (fetchId !== <span class=\"hljs-keyword\">this</span>.lastFetchId) <span class=\"hljs-keyword\">return</span>;\n                    <span class=\"hljs-keyword\">this</span>.users = body.results;\n                });\n        },\n    },\n    beforeCreate() {\n        <span class=\"hljs-keyword\">this</span>.lastFetchId = <span class=\"hljs-number\">0</span>;\n    },\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>"
        },
        {
            "language": "jsx",
            "content": "<pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> {Select, Option} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'kpc-react/components/select'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>(props) {\n        <span class=\"hljs-keyword\">super</span>(props);\n        <span class=\"hljs-keyword\">this</span>.state = {<span class=\"hljs-attr\">users</span>: []};\n        <span class=\"hljs-keyword\">this</span>.search = <span class=\"hljs-keyword\">this</span>.search.bind(<span class=\"hljs-keyword\">this</span>);\n        <span class=\"hljs-keyword\">this</span>.lastFetchId = <span class=\"hljs-number\">0</span>;\n    }\n    \n    search(select, keywords) {\n        <span class=\"hljs-built_in\">console</span>.log(keywords);\n    \n        <span class=\"hljs-keyword\">if</span> (!keywords) <span class=\"hljs-keyword\">return</span>;\n    \n        <span class=\"hljs-keyword\">const</span> fetchId = ++<span class=\"hljs-keyword\">this</span>.lastFetchId\n        fetch(<span class=\"hljs-string\">'https://randomuser.me/api/?results=10'</span>)\n            .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.json())\n            .then(<span class=\"hljs-function\"><span class=\"hljs-params\">body</span> =&gt;</span> {\n                <span class=\"hljs-keyword\">if</span> (fetchId !== <span class=\"hljs-keyword\">this</span>.lastFetchId) <span class=\"hljs-keyword\">return</span>;\n                <span class=\"hljs-keyword\">this</span>.setState({<span class=\"hljs-attr\">users</span>: body.results});\n            });\n    }\n    \n    render() {\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Select</span> <span class=\"hljs-attr\">filterable</span> <span class=\"hljs-attr\">filter</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> true} on$change-keywords={this.search}&gt;\n                {this.state.users.map((value, key) =&gt; {\n                    return (\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Option</span> \n                            <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value.login.username}</span>\n                        &gt;</span>{value.name.first} {value.name.last}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Option</span>&gt;</span>\n                    )\n                })}\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Select</span>&gt;</span></span>\n        )\n    }\n}</code></pre>"
        },
        {
            "language": "ts",
            "content": "<pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> {Component} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n    selector: <span class=\"hljs-string\">'app-demo'</span>,\n    template: <span class=\"hljs-string\">`\n        &lt;k-select [filterable]=\"true\" [filter]=\"filter\" ($change-keywords)=\"search($event)\"&gt;\n            &lt;k-option *ngFor=\"let value of users; index as key\" \n                [value]=\"value.login.username\"\n            &gt;{{ value.name.first }} {{ value.name.last }}&lt;/k-option&gt;\n        &lt;/k-select&gt;\n    `</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> AppDemoComponent {\n    <span class=\"hljs-keyword\">private</span> users = [];\n    <span class=\"hljs-keyword\">private</span> lastFetchId = <span class=\"hljs-number\">0</span>;\n\n    filter = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-literal\">true</span>;\n    \n    search([select, keywords]) {\n        <span class=\"hljs-built_in\">console</span>.log(keywords);\n    \n        <span class=\"hljs-keyword\">if</span> (!keywords) <span class=\"hljs-keyword\">return</span>;\n    \n        <span class=\"hljs-keyword\">const</span> fetchId = ++<span class=\"hljs-keyword\">this</span>.lastFetchId\n        fetch(<span class=\"hljs-string\">'https://randomuser.me/api/?results=10'</span>)\n            .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.json())\n            .then(<span class=\"hljs-function\"><span class=\"hljs-params\">body</span> =&gt;</span> {\n                <span class=\"hljs-keyword\">if</span> (fetchId !== <span class=\"hljs-keyword\">this</span>.lastFetchId) <span class=\"hljs-keyword\">return</span>;\n                <span class=\"hljs-keyword\">this</span>.users = body.results;\n            });\n    }\n}</code></pre>"
        }
    ]
}